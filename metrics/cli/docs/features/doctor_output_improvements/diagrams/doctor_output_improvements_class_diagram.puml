@startuml doctor_output_improvements_class_diagram

package cli.lib as cli_lib {
    package cli {
        package command {
            class DoctorCommand {
                + name: String
                + doctorFactory: DoctorFactory
                + validationResultPrinter: ValidationResultPrinter

                + run(): Future<void>
            }
        }

        package doctor {
            class Doctor {
                - _coolService: CoolService
                + validationResultBuilder: ValidationResultBuilder

                + checkVersions(): Future<ValidationResult>
            }
        }
    }

    package services {
        package cool_service {
            package adapter {
                class CoolCliServiceAdapter {
                    - _versionHelper: VersionHelper
                    - _coolServiceCli: CoolServiceCli

                    + checkVersion(): Future<TargetValidationResult>
                    - _getRecommendedVersion(): String
                }
            }

            package cli as cool_service_cli {
                class CoolServiceCli {
                    + version(): Future<ProcessResult>
                }
            }

            interface CoolService {
                + serviceSpecificMethod(): Future<void>
            }
        }
    }

    package util.version_helper {
        class VersionHelper {
            + getRecommendedVersion(service: String): String
        }
    }
}

package validation.lib.src {
    package model {
        package builder {
            class ValidationResultBuilder {
                - _results: Map<ValidationTarget, TargetValidationResult>

                + setResult(result: TargetValidationResult): void
                + setEmptyResults(result: TargetValidationResult): void
                + build(): ValidationResult
            }
        }

        class ValidationTarget {
            + name: String
            + description: String
        }

        class ValidationConclusion {
            + name: String
            + indicator: String
        }

        class TargetValidationResult<T> {
            + data: T
            + target: ValidationTarget
            + conclusion: ValidationConclusion
            + description: String
            + details: Map<String, dynamic>
            + context: Map<String, dynamic>

            + copyWith(): TargetValidationResult
        }

        class ValidationResult{
            + results: UnmodifiableMapView<ValidationTarget, TargetValidationResult>
        }
    }

    package printer {
        class ValidationResultPrinter{
            - _sink: StringSink

            + print(result: ValidationResult): void
        }
    }
}

TargetValidationResult --> ValidationTarget : uses
TargetValidationResult --> ValidationConclusion : uses

ValidationResult --> TargetValidationResult : uses
ValidationResult --> ValidationTarget : uses

ValidationResultBuilder -up-> ValidationResult : builds
ValidationResultBuilder -up-> ValidationTarget : uses
ValidationResultBuilder -up-> TargetValidationResult : uses

ValidationResultPrinter -left-> ValidationResult : prints

DoctorCommand --> ValidationResultPrinter : uses
DoctorCommand --> Doctor : uses
DoctorCommand --> ValidationResult : uses

Doctor --> ValidationResultBuilder : uses
Doctor --> ValidationResult : provides
Doctor --> TargetValidationResult : uses
Doctor -up-> CoolService : uses

CoolCliServiceAdapter .up.|> CoolService
CoolCliServiceAdapter -up-> CoolServiceCli : uses
CoolCliServiceAdapter -up-> VersionHelper : uses
CoolCliServiceAdapter --> TargetValidationResult : uses

@enduml
