@startuml doctor_output_improvements_class_diagram

package cli.lib as cli_lib {
    package cli {
        package command {
            class DoctorCommand {
                + name: String
                + doctorFactory: DoctorFactory
                + validationResultPrinter: ValidationResultPrinter

                + run(): Future<void>
            }
        }

        package doctor {
            class Doctor {
                - _coolService: CoolService
                - _dependencies: Dependencies
                + validationResultBuilder: ValidationResultBuilder

                + checkVersions(): Future<ValidationResult>
            }

            package factory as doctor_factory {
                class DoctorFactory {
                    - _servicesFactory: ServicesFactory
                    - _dependenciesFactory: DependenciesFactory

                    + create(): Doctor
                }
            }
        }
    }

    package services {
        package cool_service {
            package adapter {
                class CoolCliServiceAdapter {
                    - _coolServiceCli: CoolServiceCli

                    + version(): Future<ProcessResult>
                }
            }

            package cli as cool_service_cli {
                class CoolServiceCli {
                    + executable: String

                    + version(): Future<ProcessResult>
                }
            }

            interface CoolService {
                + name: String
                + version(): Future<ProcessResult>
            }
        }
    }

    package dependencies {
        package factory as dependencies_factory {
            class DependenciesFactory {
                + create(): Dependencies
            }
        }

        package constants {
            class DependenciesConstants {
                + {static} dependenciesPath: String
            }
        }

        class Dependency {
            + recommendedVersion: String
            + installUrl: String

            + fromMap(map: Map<String, dynamic>): Dependency
        }

        class Dependencies {
            - _dependencies: Map<String, Dependency>

            + getFor(service: String): Dependency
            + fromMap(map: Map<String, dynamic>): Dependencies
        }
    }
}

DoctorCommand --> Doctor : uses
DoctorCommand --> DoctorFactory : uses

DoctorFactory --> Doctor : creates
DoctorFactory --> DependenciesFactory : uses

Doctor -left-> CoolService : uses
Doctor --> Dependencies : uses
Doctor --> Dependency : uses

CoolCliServiceAdapter .up.|> CoolService
CoolCliServiceAdapter -down-> CoolServiceCli : uses

DependenciesFactory --> Dependencies : creates
DependenciesFactory --> DependenciesConstants : uses

Dependencies --> Dependency : uses

@enduml
