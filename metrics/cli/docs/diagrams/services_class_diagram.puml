@startuml services_class_diagram

package services {
    package firebase {
        interface FirebaseService {
            + login(): Future<void>
            + createWebApp(String projectId): Future<void>
            + deployHosting(String projectId, String target, String appPath): Future<void>
            + deployFirebase(String projectId, String firebasePath): Future<void>
            + upgradeBillingPlan(String projectId) : FutureOr<void>
            + initializeFirestoreData(String projectId) : FutureOr<void>
            + enableAnalytics(String projectId) : FutureOr<void>
            + configureAuthProviders(String projectId) : FutureOr<String>
            + acceptTermsOfService() : FutureOr<void>
        }

        package adapter as firebase.adapter {
            class FirebaseCliServiceAdapter {
                - _firebaseCli: FirebaseCli
                - _prompter : Prompter
            }
        }

        package cli as firebase.cli {
            class FirebaseCli {
                + login(): Future<void>
                + addFirebase(String projectId): Future<void>
                + createWebApp(String projectId, String appName): Future<void>
                + setFirebaseProject(String projectId, String workingDirectory): Future<void>
                + clearTarget(String target, String workingDirectory): Future<void>
                + applyTarget(String hostingName, String target, String workingDirectory): Future<void>
                + deployHosting(String target, String workingDirectory): Future<void>
                + deployFirestore(String workingDirectory): Future<void>
                + deployFunctions(String workingDirectory): Future<void>
                + version(): Future<void>
            }
        }

        package strings as firebase.strings {
            class FirebaseStrings {
                + {static} acceptTerms : String
                + {static} upgradeBillingPlan(String projectId) : String
                + {static} initializeData(String projectId) : String
                + {static} configureAuthProviders(String projectId) : String
                + {static} enableAnalytics(String projectId) : String
            }
        }
    }

    package gcloud {
        interface GCloudService {
            + login() : Future<void>
            + createProject() : Future<String>
            + acceptTermsOfService() : FutureOr<void>
            + configureOAuthOrigins(String projectId) : FutureOr<void>
            + configureProjectOrganization(String projectId) : FutureOr<void>
        }

        package adapter as gcloud.adapter {
            class GCloudCliServiceAdapter {
                - _gcloudCli : GCloudCli
                - _prompter : Prompter
            }
        }

        package cli as gcloud.cli {
            class GCloudCli {
                + login(): Future<void>
                + createProject(String projectId): Future<void>
                + listRegions(String projectId): Future<void>
                + createProjectApp(String region, String projectId): Future<void>
                + enableFirestoreApi(String projectId) : Future<void>
                + createDatabase(String region, String projectId): Future<void>
                + version() : Future<void>
            }
        }

        package strings as gcloud.strings {
            class GCloudStrings {
                + {static} acceptTerms : String
                + {static} enterRegionName : String
                + {static} configureOAuth(String projectId) : String
                + {static} configureProjectOrganization(String projectId) : String
            }
        }
    }

    package flutter {
        interface FlutterService  {
            + build(String appPath) : Future<void>
        }

        package adapter as flutter.adapter {
            class FlutterCliServiceAdapter  {
                - _flutterCli : FlutterCli
            }
        }

        package cli as flutter.cli {
            class FlutterCli {
                + buildWeb(String workingDirectory): Future<void>
                + enableWeb(): Future<void>
                + version(): Future<void>
            }
        }
    }

    package git {
        interface GitService  {
            + checkout(String repoUrl, String targetDirectory) : Future<void>
        }

        package adapter as git.adapter {
            class GitCliServiceAdapter {
                - _gitCli : GitCli
            }
        }

        package cli as git.cli {
            class GitCli {
                + clone(String repoUrl, String targetDirectory): Future<void>
                + version(): Future<void>
            }
        }
    }

    package npm {
        interface NpmService  {
            + installDependencies(String path) : Future<void>
        }

        package adapter as npm.adapter {
            class NpmCliServiceAdapter {
                - _npmCli : NpmCli
            }
        }

        package cli as npm.cli {
            class NpmCli {
                + install(String workingDirectory): Future<void>
                + version(): Future<void>
            }
        }
    }

    package sentry {
        interface SentryService {
            + login() : Future<void>
            + createRelease(List<SourceMap> sourceMaps) : Future<SentryRelease>
            + getProjectDsn(SentryProject project) : String
        }

        package cli as sentry.cli {
            class SentryCli {
                + login(): Future<void>
                + createRelease(SentryRelease release): Future<void>
                + uploadSourceMaps(SentryRelease release, SourceMap sourceMap): Future<void>
                + finalizeRelease(SentryRelease release): Future<void>
                + version(): Future<void>
            }
        }

        package adapter as sentry.adapter {
            class SentryCliServiceAdapter {
                - _sentryCli : SentryCli
                - _prompter : Prompter
            }
        }

        package model as sentry.model {
            class SentryProject {
                + organizationSlug : String
                + projectSlug : String
            }

            class SentryRelease {
                + name : String
                + project : SentryProject
            }

            class SourceMap {
                + path : String
                + extensions : List<String>
            }
        }

        package strings as sentry.strings {
            class SentryStrings {
                + {static} enterReleaseName : String
                + {static} enterOrganizationSlug : String
                + {static} enterProjectSlug(String organizationSlug) : String
                + {static} enterDsn(String organizationSlug, String projectSlug) : String
            }
        }
    }

    package common {
        package cli {
            interface Cli {
                + executable : String
                + version() : Future<void>
                + run(List<String> arguments, bool attachOutput, String workingDirectory, Stream<List<int>> stdin) : Future<ProcessResult>
            }
        }

        interface InfoService {
            + version() : Future<void>
        }
    }
}

FirebaseCliServiceAdapter .up.|> FirebaseService
GCloudCliServiceAdapter .up.|> GCloudService
FlutterCliServiceAdapter .down.|> FlutterService
GitCliServiceAdapter .down.|> GitService
NpmCliServiceAdapter .down.|> NpmService
SentryCliServiceAdapter .left.|> SentryService

FirebaseCliServiceAdapter -up-> FirebaseCli : uses
FirebaseCliServiceAdapter --> FirebaseStrings : uses
GCloudCliServiceAdapter -up-> GCloudCli : uses
GCloudCliServiceAdapter --> GCloudStrings : uses
FlutterCliServiceAdapter -down-> FlutterCli : uses
GitCliServiceAdapter -down-> GitCli : uses
NpmCliServiceAdapter -down-> NpmCli : uses
SentryCliServiceAdapter -right-> SentryCli : uses
SentryCliServiceAdapter --> SentryProject : uses
SentryCliServiceAdapter --> SentryRelease : uses
SentryCliServiceAdapter --> SourceMap : uses
SentryCliServiceAdapter --> SentryStrings : uses

SentryRelease --> SentryProject : uses

SentryCli --> SentryProject : uses
SentryCli --> SentryRelease : uses
SentryCli --> SourceMap : uses

FirebaseCli .up.|> Cli
GCloudCli .up.|> Cli
SentryCli .up.|> Cli
FlutterCli .down.|> Cli
GitCli .down.|> Cli
NpmCli .down.|> Cli

FirebaseService -up-|> InfoService
GCloudService -up-|> InfoService
SentryService -up-|> InfoService
GitService -down-|> InfoService
FlutterService -down-|> InfoService
NpmService -down-|> InfoService

firebase --[hidden]right--> gcloud
InfoService --[hidden]right--> Cli

@enduml
