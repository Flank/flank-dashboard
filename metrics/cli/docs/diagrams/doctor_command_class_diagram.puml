@startuml doctor_command_class_diagram

package services {
    package firebase {
        interface FirebaseService {
            + login(): Future<void>
            + createWebApp(String projectId): Future<void>
            + deployHosting(String projectId, String target, String appPath): Future<void>
            + deployFirebase(String projectId, String firebasePath): Future<void>
            + upgradeBillingPlan(String projectId) : FutureOr<void>
            + initializeFirestoreData(String projectId) : FutureOr<void>
            + enableAnalytics(String projectId) : FutureOr<void>
            + configureAuthProviders(String projectId) : FutureOr<String>
            + acceptTermsOfService() : FutureOr<void>
        }
  }

    package gcloud {
        interface GCloudService {
            + login() : Future<void>
            + createProject() : Future<String>
            + acceptTermsOfService() : FutureOr<void>
            + configureOAuthOrigins(String projectId) : FutureOr<void>
            + configureProjectOrganization(String projectId) : FutureOr<void>
        }
    }

    package flutter {
        interface FlutterService  {
            + build(String appPath) : Future<void>
        }
    }

    package  git {
        interface GitService {
            + checkout(String repoUrl, String targetDirectory) : Future<void>
        }
    }

    package  npm {
        interface NpmService {
            + installDependencies(String path) : Future<void>
        }
    }

    package sentry {
        interface SentryService {
            + login() : Future<void>
            + createRelease(List<SourceMap> sourceMaps) : Future<SentryRelease>
            + getProjectDsn(SentryProject project) : String
        }
    }
}

package common {
    package model as common.model {
        package factory as model.factory {
            class ServicesFactory {
                + create() : Services
            }
        }

        class Services {
            + flutterService : FlutterService
            + gcloudService : GCloudService
            + npmService : NpmService
            + gitService : GitService
            + firebaseService : FirebaseService
            + sentryService : SentryService
        }
    }
}
package cli {
    package command{
        class DoctorCommand {
        + name : String
        + description : String
        + doctorFactory : DoctorFactory
        + run() : Future<void>
        }
    }

package doctor {
    package factory {
        class DoctorFactory {
            - _servicesFactory : ServicesFactory
            + create() : Doctor
        }
    }

    class Doctor {
        - _flutterService : FlutterService
        - _gcloudService : GCloudService
        - _npmService : NpmService
        - _gitService : GitService
        - _firebaseService : FirebaseService
        - _sentryService : SentryService
        + checkVersions() : Future<void>
    }
}

DoctorCommand -down-> Doctor : uses
DoctorCommand --> DoctorFactory : uses

DoctorFactory --> Doctor : creates
DoctorFactory -left-> ServicesFactory : uses

ServicesFactory --> Services : creates

Doctor -down-> NpmService : uses
Doctor -down-> GitService : uses
Doctor -down-> FlutterService : uses
Doctor -down-> GCloudService : uses
Doctor -down-> FirebaseService : uses
Doctor -down-> SentryService : uses
Doctor -left-> Services : uses

@enduml
