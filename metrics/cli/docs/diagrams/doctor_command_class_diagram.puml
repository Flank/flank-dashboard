@startuml doctor_command_class_diagram

package firebase.service {
    interface FirebaseService {
        + login(): Future<void>
        + addProject(String projectId): Future<void>
        + deployHosting(String projectId, String appPath): Future<void>
        + deployFirebase(String projectId, String firebasePath): Future<void>
    }
}

package gcould.service {
    interface GCloudService {
        + login() : Future<void>
        + createProject() : Future<String>
    }
}

package flutter.service {
    interface FlutterService  {
        + build(String appPath) : Future<void>
    }
}

package git.service{
    interface GitService  {
        + checkout(String repoUrl, String targetDirectory) : Future<void>
    }
}

package npm.service {
    interface NpmService  {
        + installDependencies(String path) : Future<void>
    }
}

package sentry.service{
    interface SentryService  {
        + login() : Future<void>
        + createRelease(String appPath) : Future<void>
    }
}

package common {
    package model {
        class Services {
            + npmService : NpmService
            + gitService : GitService
            + flutterService : FlutterService
            + gcloudService : GCloudService
            + firebaseService : FirebaseService
            + sentryService : SentryService
        }
    }

    package factory as common.factory{
        class ServicesFactory {
            + create() : Services
        }
    }
}

package doctor {
    package command {
        class DoctorCommand {
            - _doctorFactory : DoctorFactory
            + run() : Future<void>
        }
    }

    package factory {
        class DoctorFactory {
            - _servicesFactory : ServicesFactory
            + create() : Doctor
        }
    }

    class Doctor {
        - _npmService : NpmService
        - _gitService : GitService
        - _flutterService : FlutterService
        - _gcloudService : GCloudService
        - _firebaseService : FirebaseService
        - _sentryService : SentryService
        + checkVersions() : Future<void>
    }
}

DoctorCommand -down-> Doctor : uses
DoctorCommand --> DoctorFactory : uses

DoctorFactory --> Doctor : creates
DoctorFactory -left-> ServicesFactory : uses

ServicesFactory --> Services : creates

Doctor -down-> NpmService : uses
Doctor -down-> GitService : uses
Doctor -down-> FlutterService : uses
Doctor -down-> GCloudService : uses
Doctor -down-> FirebaseService : uses
Doctor -down-> SentryService : uses
Doctor -left-> Services : uses

@enduml
