@startuml deploy_command_class_diagram

package services {
    package firebase {
        interface FirebaseService {
            + login(): Future<void>
            + createWebApp(String projectId): Future<void>
            + deployHosting(String projectId, String target, String appPath): Future<void>
            + deployFirebase(String projectId, String firebasePath): Future<void>
            + upgradeBillingPlan(String projectId) : FutureOr<void>
            + initializeFirestoreData(String projectId) : FutureOr<void>
            + enableAnalytics(String projectId) : FutureOr<void>
            + configureAuthProviders(String projectId) : FutureOr<String>
            + acceptTermsOfService() : FutureOr<void>
        }
  }

    package gcloud {
        interface GCloudService {
            + login() : Future<void>
            + createProject() : Future<String>
            + acceptTermsOfService() : FutureOr<void>
            + configureOAuthOrigins(String projectId) : FutureOr<void>
            + configureProjectOrganization(String projectId) : FutureOr<void>
        }
    }

    package flutter {
        interface FlutterService  {
            + build(String appPath) : Future<void>
        }
    }

    package  git {
        interface GitService {
            + checkout(String repoUrl, String targetDirectory) : Future<void>
        }
    }

    package  npm {
        interface NpmService {
            + installDependencies(String path) : Future<void>
        }
    }

    package sentry {
        interface SentryService {
            + login() : Future<void>
            + createRelease(List<SourceMap> sourceMaps) : Future<SentryRelease>
            + getProjectDsn(SentryProject project) : String
        }
    }
}

package common {
    package model as common.model {
        package factory as model.factory {
            class ServicesFactory {
                + create() : Services
            }
        }

        class Services {
            + flutterService : FlutterService
            + gcloudService : GCloudService
            + npmService : NpmService
            + gitService : GitService
            + firebaseService : FirebaseService
            + sentryService : SentryService
        }
    }
}

package common as common1 {
    package model as common1.model1 {

        class WebMetricsConfig {
            + {static} googleSignInClientIdName : String
            + {static} sentryDsnName : String
            + {static} sentryEnvironmentName : String
            + {static} sentryReleaseName : String
            + sentryConfig : SentryConfig
            + toMap() : Map<String, String>
        }

        class SentryConfig {
            + dsn : String
            + environment : String
            + release : String
        }

    }
}

package core.domain.entities {
    interface MetricsConfig {
        + googleSignInClientId : String
        + sentryDsn : String
        + sentryEnvironment : String
        + sentryRelease : String
    }
}

package cli {
    package command {
        class DeployCommand {
            + name : String
            + description : String
            + deployerFactory : DeployerFactory
            + run() : Future<void>
        }
    }

    package deployer {
        package constants {
            class DeployConstants {
                + {static} repoURL : String
                + {static} firebaseTarget : String
                + {static} sentryEnvironment : String
                + {static} tempDirectoryPrefix : String
            }
        }

        package factory {
            class DeployerFactory {
                - _servicesFactory : ServicesFactory
                + create() : Deployer
            }
        }

        package model as deployer.model {
            package factory as deployer.model.factory{
                class DeployPathsFactory {
                    + create(String rootPath) : DeployPaths
                }
            }

            class DeployPaths {
                + rootPath : String
                + webAppPath : String
                + webAppBuildPath : String
                + firebasePath : String
                + firebaseFunctionsPath : String
                + metricsConfigPath : String
            }
        }

        package strings {
            class DeployStrings {
                + {static} setupSentry : String
            }
        }

        class Deployer {
            - _flutterService : FlutterService
            - _gcloudService : GCloudService
            - _npmService : NpmService
            - _gitService : GitService
            - _firebaseService : FirebaseService
            - _sentryService : SentryService
            - _fileHelper: FileHelper
            - _prompter: Prompter
            - _deployPathsFactory: DeployPathsFactory
            + deploy() : Future<void>
        }
    }
}

package util {
    package file {
        class FileHelper {
            + getFile(String path) : File
            + createTempDirectory(Directory directory, String prefix) : Directory
            + replaceEnvironmentVariables(File file, Map<String, dynamic> environment) : void
        }
    }
}

Deployer -down-> NpmService : uses
Deployer -down-> GitService : uses
Deployer -down-> FlutterService : uses
Deployer -down-> GCloudService : uses
Deployer -down-> FirebaseService : uses
Deployer -down-> SentryService : uses
Deployer -left-> FileHelper : uses
Deployer -up-> DeployConstants : uses
Deployer -> Services : uses
Deployer -down-> WebMetricsConfig : uses
Deployer -> SentryConfig : uses
Deployer -> DeployPaths : uses
Deployer -up-> DeployPathsFactory : uses
Deployer -up-> DeployStrings : uses

DeployCommand --> Deployer : uses
DeployCommand -down-> DeployerFactory : uses
DeployerFactory -left-> ServicesFactory : uses

ServicesFactory -left-> Services : creates
DeployerFactory -down-> Deployer : creates
DeployPathsFactory -right-> DeployPaths : creates

Services -up-> NpmService : uses
Services -up-> GitService : uses
Services -up-> FlutterService : uses
Services -up-> GCloudService : uses
Services -up-> FirebaseService : uses
Services -up-> SentryService : uses

WebMetricsConfig -> SentryConfig : uses

WebMetricsConfig .up.|> MetricsConfig

@enduml
