@startuml

package cli {
    interface BaseCli {
        + version() : Future<void>
    }

    class FlutterCli {
        + version(): Future<void>
        + enableWeb(): Future<void>
        + buildWeb(String workingDir): Future<void>
    }

    class GitCli {
        + clone(String repoURL, String srcPath): Future<void>
        + version(): Future<void>
    }

    class FirebaseCli {
         + login(): Future<void>
         + addFirebase(String projectId, String firebaseToken): Future<void>
         + selectFirebaseWebApp(String projectId, String firebaseToken): Future<void>
         + createWebApp(String projectId, String firebaseToken): Future<void>
         + initFirebaseProject(String projectId, String workingDir, String firebaseToken): Future<void>
         + clearTarget(String workingDir, String firebaseToken): Future<void>
         + applyTarget(String projectId, String workingDir, String firebaseToken): Future<void>
         + deployHosting(String workingDir, String firebaseToken): Future<void>
         + deployFirestore(String workingDir, String firebaseToken): Future<void>
         + deployFunctions(String workingDir, String firebaseToken): Future<void>
         + version(): Future<void>
    }

    class GcloudCli {
        + login(): Future<void>
        + addProject(): Future<String>
        + selectProject(): Future<String>
        + setProject(): Future<void>
        + selectRegion(): Future<String>
        + addProjectApp(String region, String projectId): Future<void>
        + createDatabase(String region, String projectId): Future<void>
        + version() : Future<void>
    }

    class NpmCli {
        + install(String workingDir): Future<void>
        + version(): Future<void>
    }
}

class DeployCommand {
 fileHelper: FileHelper
 deployService : DeployService
 + run() : Future<void>
}

package utils {
    class FileHelper {
        + deleteDirectory(Directory directory) : Future<void>
    }
    class PromptWrapper {
        + prompt(String text, {Stream<List<int>> stdin}) : Future<String>
        + promptConfirm(String text, {Stream<List<int>> stdin}) : Future<bool>
        + promptTerminate() : Future<void>
    }
    class PromptUtil {
        - {static} _promptWrapper : PromptWrapper
        + {static} init(PromptWrapper promptWrapper) : void
        + {static} prompt(String text, {Stream<List<int>> stdin}) : Future<String>
        + {static} promptConfirm(String text, {Stream<List<int>> stdin}) : Future<bool>
        + {static} promptTerminate() : Future<void>
    }
}

package strings {
    class PromptStrings{}
}

package constants {
    class ConfigConstants{}
}

interface DeployService {
    + initGcloud() : Future<String>
    + initFirebase() : Future<String>
    + clone() : Future<void>
    + build() : Future<void>
    + deploy() : Future<void>
}

class DeployCliService {
    - firebaseCli : FirebaseCli
    - gcloudCli : GcloudCli
    + initGcloud() : Future<String>
    + initFirebase() : Future<String>
    + clone() : Future<void>
    + build() : Future<void>
    + deploy() : Future<void>
}

PromptUtil --> PromptWrapper : uses
DeployCliService --> ConfigConstants : uses
DeployCliService --> PromptStrings : uses
DeployCommand -right> FileHelper : uses
DeployCliService -> PromptUtil : uses
DeployCommand --> DeployService : uses
DeployCliService .up.|> DeployService

FirebaseCli ..|> BaseCli
GcloudCli ..|> BaseCli
FlutterCli ..|> BaseCli
NpmCli ..|> BaseCli
GitCli ..|> BaseCli
DeployCliService --> FirebaseCli : uses
DeployCliService --> GcloudCli : uses
DeployCliService --> FlutterCli : uses
DeployCliService --> NpmCli : uses
DeployCliService --> GitCli : uses

@enduml
