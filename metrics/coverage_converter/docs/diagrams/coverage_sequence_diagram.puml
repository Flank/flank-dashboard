@startuml coverage_sequence_diagram

actor Bob

participant CoverageConverterRunner
participant SpecificCoverageConverterCommand
participant CoverageConverterArgumentsManager
participant SpecificCoverageConverter

Bob -> CoverageConverterRunner : coverage_converter specific -i input.json -o output.json

activate CoverageConverterRunner
CoverageConverterRunner -> SpecificCoverageConverterCommand : run()
activate SpecificCoverageConverterCommand

SpecificCoverageConverterCommand -> CoverageConverterArgumentsManager : parseArgResults(argResults)
activate CoverageConverterArgumentsManager


alt inputFile == null
    activate CoverageConverterArgumentsManager

    return throw ArgumentError
    activate SpecificCoverageConverterCommand
    SpecificCoverageConverterCommand --> CoverageConverterRunner: throw ArgumentError
    deactivate SpecificCoverageConverterCommand
    activate CoverageConverterRunner
    CoverageConverterRunner --> Bob: prints error message
    deactivate CoverageConverterRunner

end

return CoverageArguments instance


alt !inputFile.exists
    activate SpecificCoverageConverterCommand

    SpecificCoverageConverterCommand --> CoverageConverterRunner: throw a CoverageConverterException
    deactivate SpecificCoverageConverterCommand

    activate CoverageConverterRunner

    CoverageConverterRunner --> Bob : prints error message
    deactivate CoverageConverterRunner

end

SpecificCoverageConverterCommand -> SpecificCoverageConverter : parse(inputFile)
activate SpecificCoverageConverter


alt error during parsing 
activate SpecificCoverageConverter

return throws an error
activate SpecificCoverageConverterCommand
SpecificCoverageConverterCommand --> CoverageConverterRunner: throws a invalid file format exception
deactivate SpecificCoverageConverterCommand
activate CoverageConverterRunner
CoverageConverterRunner --> Bob : prints error message
deactivate CoverageConverterRunner

end 

activate SpecificCoverageConverter
SpecificCoverageConverter --> SpecificCoverageConverterCommand: parsed coverage report instance

SpecificCoverageConverterCommand -> SpecificCoverageConverter : convert(reportInstance, arguments)

return CoverageData instance

SpecificCoverageConverterCommand -> SpecificCoverageConverterCommand : write Coverage as a json to output file
return
return

@enduml
