@startuml coverage_class_diagram

package common {
    package arguments {
        package model {
            class CoverageConverterArguments {
                inputFilePath : String
                outputFilePath : String
            }
        }

        package parser {
            class CoverageConverterArgumentsParser<CoverageConverterArguments> {
                void configureArguments(ArgParser)
                CoverageConverterArguments parseArgResults(ArgResults)
            }
            
            abstract ArgumentsParser<T extends CoverageConverterArguments> {
                void configureArguments(ArgParser)
                {abstract} T parseArgResults(ArgResults)
            }
        }
    }


    package command {
        abstract CoverageConverterCommand<T extends CoverageConverterArguments> {
            argumentsParser : ArgumentsParser<T>
            {abstract} converter : CoverageConverter<T>
            {abstract} name: String
            {abstract} description: String
            void run()
        }
    }

    package converter {
        interface CoverageConverter<T extends CoverageConverterArguments> {
            {abstract} CoverageData convert(File, T)
        }
    }


    package runner {
        class CoverageConverterRunner {
            argParser : CoverageConverterArgumentsParser
        }
    }

    package exceptions {
        class CoverageConverterException{
            code: CoverageConverterErrorCode
            {method} String message
            String toString()
        }


        package error_code {
            enum CoverageConverterErrorCode {
                noSuchFile
                fileIsEmpty
                invalidFileFormat
            }
        }
    }
}

package specific_format {
    package converter as specific_format.converter {
        class SpecificFormatCoverageConverter {
            CoverageData convert(File)
        }
    }

    package command as specific_format.command {
        class SpecificFormatCoverageConverterCommand {
            converter : SpecificFormatCoverageConverter
            name: String
            description: String
        }
    }
}


CoverageConverterRunner -right-> SpecificFormatCoverageConverterCommand : uses

CoverageConverterArgumentsParser -left-> CoverageConverterArguments : provides
CoverageConverterArgumentsParser ..|> ArgumentsParser


SpecificFormatCoverageConverterCommand --> SpecificFormatCoverageConverter : uses
SpecificFormatCoverageConverterCommand --|> CoverageConverterCommand

SpecificFormatCoverageConverter .down.|> CoverageConverter

CoverageConverterCommand --> CoverageConverterArguments : uses
CoverageConverterCommand -left-> CoverageConverter : uses
CoverageConverterCommand -up-> CoverageConverterException : throws
CoverageConverterCommand --> CoverageConverterArgumentsParser : uses

CoverageConverterException --> CoverageConverterErrorCode : uses



@enduml
