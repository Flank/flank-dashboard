rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /project_groups/{projectGroupId} {
      allow read, delete: if isAccessAuthorized(database);
      allow create, update: if isAccessAuthorized(database) && isProjectGroupValid();
    }

    match /projects/{projectId} {
      allow read: if isAccessAuthorized(database);
      allow create, update: if isAccessAuthorized(database) && isProjectValid();
      allow delete: if false;
    }

    match /build/{buildId} {
      allow read: if isAccessAuthorized(database);
      allow create, update: if isAccessAuthorized(database) && isBuildValid(database);
      allow delete: if false;
    }

    match /user_profiles/{userProfileId} {
      allow get: if isAccessAuthorized(database) && isDocumentOwner(userProfileId);
      allow write: if isAccessAuthorized(database) && isDocumentOwner(userProfileId) && isUserProfileValid(database);
      allow list: if false;
      allow delete: if false;
    }

    match /feature_config/{config} {
      allow read: if true;
      allow write: if false;
    }

    match /allowed_email_domains/{domain} {
      allow read, write: if false;
    }
  }

  /// Checks if a user access is authorized.
  function isAccessAuthorized(database) {
    return request.auth.uid != null && isEmailValid(database)
  }

  /// Checks if the request is from a user with a valid email.
  function isEmailValid(database) {
    let isEmailPresent = request.auth.token.email != null;
    let isEmailVerified = request.auth.token.email_verified;

    return isEmailPresent && (isSignInProviderPassword() || (isEmailDomainAllowed(database) && isEmailVerified));
  }

  /// Checks whether a request's email domain is in the allowed domains list.
  function isEmailDomainAllowed(database) {
    let authToken = request.auth.token;
    let userEmail = authToken.email;
    let emailDomain = userEmail.split('@')[1];
    let isEmailDomainExists = exists(/databases/$(database)/documents/allowed_email_domains/$(emailDomain));

    return isEmailDomainExists;
  }

  /// Checks if the sign in provider from the request is a password.
  function isSignInProviderPassword() {
    let authToken = request.auth.token;

    return authToken.firebase.sign_in_provider == 'password';
  }

  /// Checks whether project group data from the request is valid.
  function isProjectGroupValid() {
    return isProjectGroupDataValid()
      && isString("name")
      && isList("projectIds")
      && isProjectGroupNameValid()
      && isProjectGroupIdsValid();
  }

  /// Check whether the request data contains only allowed for project group document fields.
  function isProjectGroupDataValid() {
    let requestData = request.resource.data;

    return requestData.keys().hasOnly(["name", "projectIds"]);
  }

  /// Checks whether the project group name field from the request is valid.
  function isProjectGroupNameValid() {
    let projectGroupNameMaxSize = 255;
    let requestData = request.resource.data;

    return requestData.name.size() <= projectGroupNameMaxSize;
  }

  /// Checks whether the project group ids field from the request is valid.
  function isProjectGroupIdsValid() {
    let projectIdsMaxSize = 20;
    let requestData = request.resource.data;

    return requestData.projectIds.size() <= projectIdsMaxSize;
  }

  /// Checks whether a field of request data is the string.
  function isString(field) {
    let requestData = request.resource.data;

    return field in requestData && requestData[field] is string;
  }

  /// Checks whether a field of requested data is a list.
  function isList(field) {
    let requestData = request.resource.data;

    return field in requestData && requestData[field] is list;
  }

  /// Checks whether project data from the request is valid.
  function isProjectValid() {
    let requestData = request.resource.data;

    return isProjectDataValid(requestData) && isString("name");
  }

  /// Check whether the request data contains only allowed for project document fields.
  function isProjectDataValid(data) {
    return data.keys().hasOnly(["name"]);
  }

  /// Checks whether the request contains the valid build data.
  function isBuildValid(database) {
    let validBuildStatuses = [
      "BuildStatus.successful",
      "BuildStatus.unknown",
      "BuildStatus.failed"
    ];

    return isBuildDataValid()
          && isString("projectId")
          && projectExists(database)
          && isInteger("buildNumber")
          && isTimestamp("startedAt", false)
          && isEnumOrNull("buildStatus", validBuildStatuses)
          && isInteger("duration")
          && isStringOrNull("workflowName")
          && isString("url")
          && isStringOrNull("apiUrl")
          && isFloatOrNull("coverage", 0.0, 1.0);
  }

  /// Check whether the request data contains only allowed for build document fields.
  function isBuildDataValid() {
    let requestData = request.resource.data;

    return requestData.keys().hasOnly([
      "projectId",
      "buildNumber",
      "startedAt",
      "buildStatus",
      "duration",
      "workflowName",
      "url",
      "apiUrl",
      "coverage",
    ]);
  }


  /// Checks if a field of the request data is a valid enum value.
  function isEnum(field, validEnumValues) {
    let requestData = request.resource.data;

    return requestData[field] in validEnumValues;
  }

  /// Checks if a field of the request data is a valid enum value or null.
  function isEnumOrNull(field, validEnumValues) {
    return isNotInRequestOrNull(field) || isEnum(field, validEnumValues);
  }

  /// Checks if a field of the request data is a string or null.
  function isStringOrNull(field) {
    let requestData = request.resource.data;

    return isNotInRequestOrNull(field) || requestData[field] is string;
  }

  /// Checks if a field is a float and in bounds from min to max or null.
  function isFloatOrNull(field, min, max) {
    let requestData = request.resource.data;

    return isNotInRequestOrNull(field) || (requestData[field] >= min && requestData[field] <= max);
  }

  /// Checks whether a field is not in request data or it is null.
  function isNotInRequestOrNull(field) {
    let requestData = request.resource.data;

    return !(field in requestData) || requestData[field] == null;
  }

  /// Checks whether projectId in requested data points to the existing project.
  function projectExists(database) {
    return "projectId" in request.resource.data
        && exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId));
  }

  /// Checks whether a field of the request data is a timestamp.
  function isTimestamp(field, canBeInFuture) {
    let requestData = request.resource.data;

    return field in requestData
          && requestData[field] is timestamp
          &&  (canBeInFuture || isDateInPast(requestData.startedAt));
  }

  /// Checks whether a timestamp of requested data is not after the request time.
  function isDateInPast(date) {
    return date <= request.time;
  }

  /// Checks whether a field of requested data is an integer.
  function isInteger(field) {
    let requestData = request.resource.data;

    return field in requestData && requestData[field] is int;
  }

  /// Checks whether a user is the owner of the document with the given document id.
  function isDocumentOwner(documentId) {
    return request.auth.uid == documentId;
  }

  /// Checks whether the request contains the valid user profile data.
  function isUserProfileValid(database) {
    let validThemes = ["ThemeType.dark", "ThemeType.light"];

    return isUserProfileDataValid() && isEnum("selectedTheme", validThemes);
  }

  /// Check whether the request data contains only allowed for a user profile document fields.
  function isUserProfileDataValid() {
    let requestData = request.resource.data;

    return requestData.keys().hasOnly([
      "selectedTheme",
    ]);
  }
}
