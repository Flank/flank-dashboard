rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    match /projects/{projectId} {
      allow read: if isLoggedIn();
      allow create, update: if isLoggedIn() && isProjectValid();
      allow delete: if false;
    }


    match /build/{buildId} {
      allow read: if isLoggedIn();
      allow create, update: if isLoggedIn() && isBuildValid(database);
      allow delete: if false;
    }
  }


  /// Checks if a request is from a logged-in user.
  function isLoggedIn() {
    return request.auth.uid != null
  }

  /// Checks whether project data from the request is valid.
  function isProjectValid(){
    let requestData = request.resource.data;

    return isValidProjectData(requestData)
          && "name" in requestData 
          && isString(requestData.name);
  }

  /// Check whether the data contains only allowed for project document fields.
  function isValidProjectData(data){
    return data.keys().hasOnly(["name"]);
  }

  /// Checks whether the data is the string.
  function isString(data){
    return data is string;
  }

  /// Checks whether build data from the request is valid.
  function isBuildValid(database){
    let requestData = request.resource.data;

    return isValidBuildData(requestData)
          && projectExists(database) 
          && hasValidStartedAtTimestamp(requestData) 
          && hasDuration(requestData) 
          && hasUrl(requestData);
  }

  /// Check whether the data contains only allowed for build document fields.
  function isValidBuildData(data){
    return data.keys().hasOnly([
      "projectId",
      "buildNumber",
      "startedAt",
      "buildStatus",
      "duration",
      "workflowName",
      "url",
      "coverage",
    ]);
  }

  /// Chacks whether projectId in requested data points to existing project.
  function projectExists(database){
    let projectId = request.resource.data.projectId;
    return exists(/databases/$(database)/documents/projects/$(projectId));
  }

  /// Checks whether data from request contains a startedAt timestamp.
  function hasValidStartedAtTimestamp(requestData){
    return "startedAt" in requestData 
          && requestData.startedAt is timestamp
          && isDateInPast(requestData.startedAt);
  }

  /// Checks whether timestamp is not after the request time.
  function isDateInPast(date){
    return date <= request.time;
  }

  /// Checks whether data from request contains a duration integer.
  function hasDuration(requestData){
    return "duration" in requestData && requestData.duration is int;
  }

  /// Checks whether data from request contains a url string.
  function hasUrl(requestData){
    return "url" in requestData && isString(requestData.url);
  }
}
