rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    match /projects/{projectId} {
      allow read: if isLoggedIn();
      allow create, update: if isLoggedIn() && isProjectValid();
      allow delete: if false;
    }


    match /build/{buildId} {
      allow read: if isLoggedIn();
      allow create, update: if isLoggedIn() && isBuildValid(database);
      allow delete: if false;
    }
  }

  /// Checks if a request is from a logged-in user.
  function isLoggedIn() {
    return request.auth.uid != null
  }

  /// Checks whether project data from the request is valid.
  function isProjectValid(){
    let requestData = request.resource.data;

    return isValidProjectData(requestData) && isString("name");
  }

  /// Check whether the data contains only allowed for project document fields.
  function isValidProjectData(data){
    return data.keys().hasOnly(["name"]);
  }

  /// Checks whether the field is the string.
  function isString(field){
    let requestData = request.resource.data;

    return field in requestData && requestData[field] is string;
  }

  /// Checks whether build data from the request is valid.
  function isBuildValid(database){
    let requestData = request.resource.data;

    return isValidBuildData(requestData)
          && projectExists(database)
          && isIntegerOrNull("buildNumber")
          && hasValidStartedAtTimestamp(requestData) 
          && isBuildStatusValid()
          && isInteger("duration") 
          && isStringOrNull("workflowName")
          && isString("url")
          && isCoverageValid();
  }

  /// Check whether the data contains only allowed for build document fields.
  function isValidBuildData(data){
    return data.keys().hasOnly([
      "projectId",
      "buildNumber",
      "startedAt",
      "buildStatus",
      "duration",
      "workflowName",
      "url",
      "coverage",
    ]);
  }


  /// Checks if build status has a valid value or null.
  function isBuildStatusValid(){
    let requestData = request.resource.data;
    let validStatuses = [
      "BuildStatus.successful",
      "BuildStatus.cancelled",
      "BuildStatus.failed"
    ];

    return isNotInRequestOrNull("buildStatus") || requestData["buildStatus"] in validStatuses;
  }

  /// Checks if fields is string or null.
  function isStringOrNull(field){
    let requestData = request.resource.data;

    return isNotInRequestOrNull(field) || requestData[field] is string;
  }

  /// Checks if fields is integer or null.
  function isIntegerOrNull(field){
    let requestData = request.resource.data;

    return isNotInRequestOrNull(field) || requestData[field] is int;
  }

  /// Checks if field is float or null
  function isCoverageValid(){
    let requestData = request.resource.data;

    return isNotInRequestOrNull("coverage") || (requestData["coverage"] >= 0.0 && requestData["coverage"] <= 1.0);
  }

  /// Checks whether the field is not in reequest data or it is null.
  function isNotInRequestOrNull(field){
    let requestData = request.resource.data;

    return !(field in requestData) || requestData[field] == null;
  }

  /// Checks whether projectId in requested data points to existing project.
  function projectExists(database){
    return "projectId" in request.resource.data 
        && exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId));
  }

  /// Checks whether data from request contains a startedAt timestamp.
  function hasValidStartedAtTimestamp(requestData){
    return isTimestamp("startedAt") && isDateInPast(requestData.startedAt);
  }

  /// Checks whether the field is the timestamp.
  function isTimestamp(field) {
    let requestData = request.resource.data;

    return field in requestData && requestData[field] is timestamp;
  }

  /// Checks whether timestamp is not after the request time.
  function isDateInPast(date){
    return date <= request.time;
  }

  /// Checks whether the field is the integer.
  function isInteger(field){
    let requestData = request.resource.data;

    return field in requestData && requestData[field] is int;
  }
}
