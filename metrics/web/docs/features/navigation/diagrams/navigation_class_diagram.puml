@startuml navigation_class_diagram

class MetricsApp {}

package common.presentation {

    package injector.widget {
        class InjectionContainer {}
    }

    package navigation {

        package route_configration {
            class RouteName {
            }

            class RouteConfiguration {
                + name : RouteName
                + path : String
                + authorizationRequired : bool
            }

            class RouteConfigurationFactory {
                + RouteConfiguration create()
            }
        }
        class MetricsRouteInformationParser {
            - RouteConfigurationFactory _routeConfigurationFactory
            + Future<RouteConfiguration> parseRouteInformation()
            + RouteInformation restoreRouteInformation()
        }
        class MetricsRouterDelegate {
            + navigatorKey : GlobalKey<NavigatorState>
            + currentConfiguration : RouteConfiguration
            + navigatorObservers : List<NavigatorObservers>
            - navigationNotifier : NavigationNotifier
            + Future<void> setInitialRoutePath(RouteConfiguration routeConfiguration)
            + Future<void> setNewRoutePath(RouteConfiguration routeConfiguration)
        }

        package constants {
            class MetricsRoutes {}
        }

        package state {
            class NavigationNotifier {
                + pages : List<MetricsPage>
                + currentConfiguration : RouteConfiguration
                - _metricsPageFactory : MetricsPageFactory
                - _routeConfigurationFactory : RouteConfigurationFactory
                - _isUserLoggedIn : bool
                + void handleUserStateUpdates(bool isLoggedIn)
                + Future<void> pop(MetricsPage page)
                + Future<void> push(MetricsPage page)
                + Future<void> pushNamed(String path)
                + Future<void> pushReplacement(MetricsPage page)
                + Future<void> pushReplacementNamed(String path)
                + Future<void> pushAndRemoveUntil (MetricsPage page, bool Function(Page) test)
                + Future<void> pushNamedAndRemoveUntil (MetricsPage page, bool Function(Page) test)
                + void didPop(MetricsPage page)
                + void setInitialRoutePath(RouteConfiguration routeConfiguration)
                + void setNewRoutePath(RouteConfiguration routeConfiguration)
            }
        }


        package metrics_page {
            class MetricsPageFactory {
                + MetricsPage<T> create<T>()
            }

            class MetricsPage {
                + builder : WidgetBuilder
                + maintainState : bool
                + fullScreenDialog : bool
                + Route<T> createRoute()
            }
        }

    }
}

InjectionContainer --> NavigationNotifier : provides

MetricsApp --> MetricsRouteInformationParser :uses
MetricsApp --> MetricsRouterDelegate : uses

MetricsRouteInformationParser --> RouteConfiguration : provides
MetricsRouteInformationParser --> RouteConfigurationFactory : uses

RouteConfiguration --> RouteName : uses

RouteConfigurationFactory -> RouteConfiguration : uses
RouteConfigurationFactory -> MetricsRoutes : uses

MetricsRouterDelegate --> NavigationNotifier : uses

NavigationNotifier --> RouteConfigurationFactory : uses
NavigationNotifier --> RouteConfiguration : uses
NavigationNotifier --> MetricsPageFactory : uses

MetricsPageFactory --> MetricsPage : uses

@enduml
