@startuml navigation_class_diagram

class MetricsApp {}

package common.presentation.navigation {
        package path_configuration {
            class RouteConfiguration {
               + routeEnum : MetricsRouteEnum
               + name : String
               + path : String
               + authorizationRequired : bool
               + nestedRouteInformationFactory : RouteConfigurationFactory
            }
            class MetricsRouteEnum {}
            class RouteConfigurationFactory {
               + RouteConfiguration create()
               - RouteConfiguration _handleNested()
            }
        }
        class MetricsRouteInformationParser {
            - RouteConfigurationFactory _routeConfigurationFactory
            + Future<RouteConfiguration> parseRouteInformation()
            + RouteInformation restoreRouteInformation()
        }
        class MetricsRouterDelegate {
            + navigatorKey : GlobalKey<NavigatorState>
            + currentConfiguration : RouteConfiguration
            + navigatorObservers : List<NavigatorObservers>
            - navigationNotifier : NavigationNotifier
            + Future<void> setInitialRoutePath(RouteConfiguration routeConfiguration)
            + Future<void> setNewRoutePath(RouteConfiguration routeConfiguration)
        }
        class NavigationNotifier {
            + pages : List<Page> 
            + currentConfiguration : RouteConfiguration
            - _metricsRoutePageFactory : MetricsRoutePageFactory
            - _routeConfigurationFactory : RouteConfigurationFactory
            - _isUserLoggedIn : bool
            + void handleUserStateUpdates(bool isLoggedIn)
            + void addNewPage(Page page)
            + void popNamed(String path)
            + void pushReplacement(Page page)
            + void didPop(Page page)
            + void pushNamed(String path)
            + void pushReplacementNamed(String path)
            + void pushAndRemoveWhere(String path, bool Function(Page) test)
            + void setInitialRoutePath(RouteConfiguration routeConfiguration)
            + void setNewRoutePath(RouteConfiguration routeConfiguration)
        }
        class MetricsRoutePageFactory{
            + MetricsRoutePage<T> create<T>()
        }
        class MetricsRoutePage {
            + builder : WidgetBuilder
            + maintainState : bool
            + fullScreenDialog : bool
            + Route<T> createRoute()
        } 
}

MetricsApp --> MetricsRouteInformationParser :uses
MetricsApp --> MetricsRouterDelegate : uses
MetricsRouteInformationParser --> RouteConfiguration : provides
MetricsRouteInformationParser --> RouteConfigurationFactory : uses
RouteConfiguration --> MetricsRouteEnum : uses
RouteConfigurationFactory -> RouteConfiguration : uses
MetricsRouterDelegate --> NavigationNotifier : uses
NavigationNotifier --> RouteConfigurationFactory : uses
NavigationNotifier --> RouteConfiguration : uses
NavigationNotifier --> MetricsRoutePageFactory : uses
MetricsRoutePageFactory --> MetricsRoutePage : uses
@enduml
