@startuml navigation_class_diagram

class MetricsApp {}



package common.domain.entity {
    class RouteName {}
}

package common.presentation {
    package injector.widget {
        class InjectionContainer {}
    }

package navigation {
        package path_configuration {
            class RouteConfiguration {
                + routeName : RouteName
                + name : String
                + path : String
                + authorizationRequired : bool
                + nestedRouteInformationFactory : RouteConfigurationFactory
            }
            class RouteConfigurationFactory {
                + RouteConfiguration create()
                - RouteConfiguration _handleNested()
            }
            class MetricsAppRoutes {}
        }
        class MetricsRouteInformationParser {
            - RouteConfigurationFactory _routeConfigurationFactory
            + Future<RouteConfiguration> parseRouteInformation()
            + RouteInformation restoreRouteInformation()
        }
        class MetricsRouterDelegate {
            + navigatorKey : GlobalKey<NavigatorState>
            + currentConfiguration : RouteConfiguration
            + navigatorObservers : List<NavigatorObservers>
            - navigationNotifier : NavigationNotifier
            + Future<void> setInitialRoutePath(RouteConfiguration routeConfiguration)
            + Future<void> setNewRoutePath(RouteConfiguration routeConfiguration)
        }
        class NavigationNotifier {
            + pages : List<Page>
            + currentConfiguration : RouteConfiguration
            - _metricsPageFactory : MetricsPageFactory
            - _routeConfigurationFactory : RouteConfigurationFactory
            - _isUserLoggedIn : bool
            + void handleUserStateUpdates(bool isLoggedIn)
            + void addNewPage(Page page)
            + void popNamed(String path)
            + void pushReplacement(Page page)
            + void didPop(Page page)
            + void pushNamed(String path)
            + void pushReplacementNamed(String path)
            + void pushAndRemoveWhere(String path, bool Function(Page) test)
            + void setInitialRoutePath(RouteConfiguration routeConfiguration)
            + void setNewRoutePath(RouteConfiguration routeConfiguration)
        }
        class MetricsPageFactory{
            + MetricsPage<T> create<T>()
        }
        class MetricsPage {
            + builder : WidgetBuilder
            + maintainState : bool
            + fullScreenDialog : bool
            + Route<T> createRoute()
        }
        class MetricsPageRoute {} 
    }
}

InjectionContainer --> NavigationNotifier : provides

MetricsApp --> MetricsRouteInformationParser :uses
MetricsApp --> MetricsRouterDelegate : uses

MetricsRouteInformationParser --> RouteConfiguration : provides
MetricsRouteInformationParser --> RouteConfigurationFactory : uses

RouteConfiguration --> RouteName : uses

RouteConfigurationFactory -> RouteConfiguration : uses
RouteConfigurationFactory -> MetricsAppRoutes : uses

MetricsRouterDelegate --> NavigationNotifier : uses

NavigationNotifier --> RouteConfigurationFactory : uses
NavigationNotifier --> RouteConfiguration : uses
NavigationNotifier --> MetricsPageFactory : uses

MetricsPageFactory --> MetricsPage : uses
MetricsPage --> MetricsPageRoute : uses

@enduml
