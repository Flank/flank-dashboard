@startuml

abstract class PageNotifier {
    + pageParametersUpdatesStream : Stream<PageParameters>

    + handlePageParameters(PageParameters parameters) : void
}

class PageParametersDispatcher {
    + pageNotifiers : List<PageNotifier>
    + child : Widget
}

abstract class PageParameters {
    + toQueryParameters() : Map<String, dynamic>
}

class DashboardPageParameters {
    + selectedProjectGroup : String
}

package common.presentation {
    package navigation {
        class MetricsRouteInformationParser {
            + restoreRouteInformation(configuration: RouteConfiguration) : RouteInformation
        }

        package metrics_page {
            class MetricsPage<T> {}

            class MetricsPageFactory {
                + create(configuration : RouteConfiguration)
            }
        }

        package route_configuration {
            class RouteConfiguration {
                + name : RouteName
                + path : String
                + authorizationRequired : bool
                + queryParameters : Map<String, dynamic>

                + props() : List<Object>
                + copyWith() : RouteConfiguration
                + toUrl() : String
            }

            class RouteConfigurationFactory {
                + create(uri: Uri) : RouteConfiguration
                - _getRoute(routeName: String)
            }
        }

        package state {
            class NavigationNotifier {}
        }
    }


}

package dashboard.presentation.state {
    class ProjectMetricsNotifier {}
}

PageParametersDispatcher --> PageNotifier : uses

PageNotifier --|> ChangeNotifier
PageNotifier --> PageParameters : uses

ProjectMetricsNotifier --|> PageNotifier

MetricsPageFactory --> MetricsPage : creates

MetricsPageFactory --> RouteConfiguration : uses

RouteConfigurationFactory --> RouteConfiguration : creates

DashboardPageParameters ..|> PageParameters

MetricsRouteInformationParser --> RouteConfiguration : uses

@enduml