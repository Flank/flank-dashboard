@startuml public_dashboard_class_diagram

package auth {
    package presentation as auth_presentation{
        package view_models as auth_view_models {
            class UserProfileViewModel {
                + isAnonymous: bool
            }
        }

        package models as auth_models {
            enum AuthState {
                 loggedIn
                 loggedInAnonymously
                 loggedOut
            }
        }

        package state as auth_state {
            class AuthNotifier {
                - _isPublicDashboardFeatureEnabled: bool
                + authState: AuthState
                + isAuthInitialized: bool
                + userProfileViewModel: UserProfileViewModel
                - signInAnonymously(): Future<void>
                + handlePublicDashboardFeatureConfigUpdates(PublicDashboardFeatureConfigModel model): void
            }
        }
    }

    package domain.usecases {
        class SignInAnonymouslyUseCase<Future<void>, void> {
            - _repository: UserRepository
            + call([_]): Future<void>
        }
    }
}

package feature_config.presentation {
    package models as feature_config_models {
        class PublicDashboardFeatureConfigModel {
            + isEnabled: bool
        }
    }

    package state as feature_config_state{
        class FeatureConfigNotifier {
            + publicDashboardFeatureConfigModel: PublicDashboardFeatureConfigModel
        }
    }
}

package common.navigation {
    package state as navigation_state {
        class NavigationNotifier {
            - _authState: AuthState
            + handleAuthUpdates(AuthState authState): void
        }
    }

    package route_configuration {
        class RouteName {
            + {static} anonymousRouteNames: Set<RouteName>
        }
    }
}

package common.presentation.injector.widget {
    class InjectionContainer {
        - _authNotifier: AuthNotifier
        - _featureConfigNotifier: FeatureConfigNotifier
        - _navigationNotifier: NavigationNotifier
        - _authNotifierListener(): void
        - _featureConfigNotifierListener(): void
    }
}

InjectionContainer --> AuthNotifier: uses
InjectionContainer --> FeatureConfigNotifier: uses
InjectionContainer --> NavigationNotifier: uses
NavigationNotifier --> RouteName: uses
NavigationNotifier ---> AuthState: uses
AuthNotifier --> SignInAnonymouslyUseCase: uses
AuthNotifier --> AuthState: provides
AuthNotifier --> UserProfileViewModel: provides
AuthNotifier --> PublicDashboardFeatureConfigModel: uses
FeatureConfigNotifier --> PublicDashboardFeatureConfigModel: provides

@enduml
