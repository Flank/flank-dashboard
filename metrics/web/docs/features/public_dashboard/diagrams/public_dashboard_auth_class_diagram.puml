@startuml public_dashboard_auth_class_diagram

package base.domain.usecases {
    abstract class UseCase<Type, Params> {
        + call(Params params): Type
    }
}

package auth {
    package presentation {
        package view_models {
            class UserProfileViewModel {
                + isLoggedIn: bool
                + isAnonymous: bool
            }
        }

        package models {
            class UserProfileModel {
                + isLoggedIn: bool
                + isAnonymous: bool
            }
        }

        package state {
            class AuthNotifier {
                + signInAnonymously(): Future<void>
            }
        }
    }

    package domain {
        package repositories {
            class UserRepository {
                + signInAnonymously(): Future<void>
            }
        }

        package usecases {
            class SignInAnonymouslyUseCase<Future<void>, void> implements UseCase {
                - _repository: UserRepository
            }
        }
    }

    package data.repositories {
        class FirebaseUserRepository implements UserRepository {}
    }
}

SignInAnonymouslyUseCase --> UserRepository: uses
AuthNotifier --> SignInAnonymouslyUseCase: uses
AuthNotifier --> UserProfileModel: provides
AuthNotifier --> UserProfileViewModel: provides
@enduml
