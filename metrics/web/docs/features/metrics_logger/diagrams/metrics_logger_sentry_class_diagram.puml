@startuml metrics_logger_class_diagram

package metrics {
  class MetricsApp {}

  class LoggerWriter {
    + writeError(Object error, [Object stackTrace]) : FutureOr<void>
    + setContext(String key, Map<String, dynamic> context) : FutureOr<void>
  }

  class SentryWriter implements LoggerWriter {
    + static init(String dsn, String release) : SentryWriter
    + writeError(Object error, [Object stackTrace]) : Future<void>
    + setContext(String key, Map<String, dynamic> context) : Future<void>
  }

  class MetricsLogger {
    - _loggerWriter : LoggerWriter
    + static initialize(LoggerWriter loggerWriter,  Map<String, dynamic> contexts) : Future<void>
    + static logError(Object error, [Object stackTrace]) : Future<void>
    + static setContext(String key, Map<String, dynamic> context) : Future<void>
  }

  class WebContextProvider {
    + getBrowserContext() : Map<String, dynamic>
    + getDeviceContext() : Map<String, dynamic>
    + getOsContext() : Map<String, dynamic>
  }
}

package sentry {
  class Sentry {}
}

MetricsApp --> WebContextProvider : uses
MetricsApp --> MetricsLogger : uses
MetricsLogger --> LoggerWriter : uses
SentryWriter --> Sentry : uses

@enduml
