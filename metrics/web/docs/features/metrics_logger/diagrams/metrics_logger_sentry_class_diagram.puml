@startuml metrics_logger_class_diagram

package metrics {
  class MetricsApp {}

  package metrics_logger {
    package writers {
      interface LoggerWriter {
        + writeError(Object error, [StackTrace stackTrace]) : FutureOr<void>
        + setContext(String key, dynamic context) : FutureOr<void>
      }
    }

    package sentry as sentry_logger {
      package writers as sentry_writers {
        class SentryWriter implements LoggerWriter {
          + //static// init(String dsn, String release, {SentryEventProcessor eventProcessor}) : SentryWriter
          + writeError(Object error, [StackTrace stackTrace]) : Future<void>
          + setContext(String key, dynamic context) : void
        }
      }

      package event_processors {
        interface SentryEventProcessor {
          + call(SentryEvent event, {dynamic hint}) : FutureOr<SentryEvent>
        }
      }
    }

    class MetricsLogger {
      - //static// _loggerWriter : LoggerWriter
      + //static// initialize(LoggerWriter loggerWriter,  Map<String, dynamic> contexts) : Future<void>
      + //static// logError(Object error, [StackTrace stackTrace]) : Future<void>
      + //static// setContext(String key, dynamic context) : Future<void>
    }
  }
}

package sentry {
  class Sentry {}
}

MetricsApp --> MetricsLogger : uses
MetricsLogger --> LoggerWriter : uses
SentryWriter -right-> Sentry : uses
SentryWriter --> SentryEventProcessor : uses

@enduml
