@startuml build_days_domain_layer_class_diagram

package common.domain {
    package entities {
        class BuildDay {
            + projectId : String
            + successful: int
            + failed: int
            + unknown: int
            + inProgress: int
            + totalDuration : Duration
            + day : DateTime
        }
    }

    package repositories {
        interface BuildDayRepository {
            + projectBuildDaysInDateRangeStream(String projectId, {DateTime from, DateTime to}) : Stream<List<BuildDay>>
        } 
    }
}

package dashboard.domain {
    package entities.metrics {
        class BuildNumberMetric {
            + numberOfBuilds : int
        }
        class BuildPerformance {
            + date : DateTime
            + duration: Duration
        }
        class PerformanceMetric {
            + buildsPerformance : DateTimeSet<BuildPerformance>
            + averageBuildDuration : Duration
        }
        class ProjectBuildStatusMetric {
            + status : BuildStatus
        }
        class BuildResultMetric {
            + buildResults : List<BuildResult>
        }
        class BuildDayProjectMetrics {
            + buildNumberMetric : BuildNumberMetric
            + performanceMetric : PerformanceMetric
        }
        class DashboardProjectMetrics {
            + projectId : String
            + projectBuildStatusMetric : ProjectBuildStatusMetric
            + buildResultMetrics : BuildResultMetric
            + coverage : Percent
            + stability : Percent
        }
    }

    package usecases {
        class ReceiveBuildDayProjectMetricsUpdates {
            - _repository : BuildDayRepository
            + call(ProjectIdParam params) : Stream<BuildDayProjectMetrics>
        }

        class ReceiveProjectMetricsUpdates {
            + call(ProjectIdParam params) : Stream<DashboardProjectMetrics>
        }

        package parameters {
            class ProjectIdParam {
                + id : String
            }
        }
    }  
}

package base.domain.usecases {
    interface UseCase<Type, Params> {
        call: Type
    }
}

BuildDayRepository --> BuildDay : provides
ReceiveBuildDayProjectMetricsUpdates -right-..|> UseCase
ReceiveBuildDayProjectMetricsUpdates --> BuildDayRepository : uses
ReceiveBuildDayProjectMetricsUpdates -up-> ProjectIdParam : uses
ReceiveBuildDayProjectMetricsUpdates --> BuildDayProjectMetrics : provides

ReceiveProjectMetricsUpdates -up-> ProjectIdParam : uses
ReceiveProjectMetricsUpdates -down--> DashboardProjectMetrics : provides

BuildDayProjectMetrics --> BuildNumberMetric : uses
BuildDayProjectMetrics --> PerformanceMetric : uses
PerformanceMetric --> BuildPerformance : uses

DashboardProjectMetrics --> ProjectBuildStatusMetric : uses
DashboardProjectMetrics --> BuildResultMetric : uses

@enduml
