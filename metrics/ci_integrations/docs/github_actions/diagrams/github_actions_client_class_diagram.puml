@startuml github_actions_client_class_diagram

package integration.interface.base.client.mapper {
    interface Mapper<SourceType, DestinationType> {
        map(SourceType value): DestinationType
        unmap(DestinationType value): SourceType
    }
}

package github_actions {
    package models {
        interface Page<T> {
            + totalCount: int
            + page: int
            + perPage: int
            + nextPageUrl: String
            + values: List<T>
        }

        class WorkflowRunsPage<WorkflowRun> implements Page {
            + totalCount: int
            + page: int
            + perPage: int
            + nextPageUrl: String
            + values: List<WorkflowRun>
        }

        class WorkflowRunArtifactsPage<WorkflowRunArtifact> implements Page {
            + totalCount: int
            + page: int
            + perPage: int
            + nextPageUrl: String
            + values: List<WorkflowRunArtifact>
        }

        class WorkflowRun {
            + id: int
            + number: int
            + url: String
            + status: RunStatus
            + conclusion: RunConclusion
            + createdAt: DateTime

            + factory fromJson(Map<String, dynamic> json): WorkflowRun
            + toJson(): Map<String, dynamic>
            + listFromJson(List<dynamic> list): List<WorkflowRun>
        }

        class WorkflowRunArtifact {
            + id: int
            + name: String
            + downloadUrl: String

            + factory fromJson(Map<String, dynamic> json): WorkflowRunArtifact
            + toJson(): Map<String, dynamic>
            + listFromJson(List<dynamic> list): List<WorkflowRunArtifact>
        }

        class WorkflowRunDuration {
            + duration: Duration

            + factory fromJson(Map<String, dynamic> json): WorkflowRunDuration
            + toJson(): Map<String, dynamic>
        }


        enum RunStatus {
            queued
            inProgress
            completed
        }

        enum RunConclusion {
            success
            failure
            neutral
            cancelled
            skipped
            timedOut
            actionRequired
        }

    }

    package mappers {
        class RunConclusionMapper<String, RunConclusion> implements Mapper {
            + map(String conclusion): RunConclusion
            + unmap(RunConclusion conclusion): String
        }

        class RunStatusMapper<String, RunStatus> implements Mapper {
            + map(String status): RunStatus
            + unmap(RunStatus status): String
        }

    }


    class GithubActionsClient {
        + repositoryOwner: String
        + repositoryName: String
        + githubApiUrl: String
        + authorization: AuthorizationBase

        + getHeaders() : Map<String, String>
        + fetchWorkflowRuns(String workflowIdentifier, RunStatus status, int perPage, int page): Future<InteractionResult<WorkflowRunsPage>>
        + fetchNextRunsPage(WorkflowRunsPage currentPage) : Future<InteractionResult<WorkflowRunsPage>>
        + fetchRunArtifacts(int runId, int perPage, int page): Future<InteractionResult<WorkflowRunArtifactsPage>>
        + fetchNextRunArtifactsPage(WorkflowRunArtifactsPage currentPage) : Future<InteractionResult<WorkflowRunArtifactsPage>>
        + downloadRunArtifactZip(String url): Future<InteractionResult<UInt8List>>
        + fetchRunDuration(int runId): Future<InteractionResult<WorkflowRunDuration>>
        + close(): void
    }
}


WorkflowRunDuration <-- GithubActionsClient : uses
WorkflowRunsPage <-- GithubActionsClient : uses
WorkflowRunArtifactsPage <-- GithubActionsClient : uses
WorkflowRun "1..N" -up-o "1" WorkflowRunsPage : uses
WorkflowRunArtifact "1..N" -up-o "1" WorkflowRunArtifactsPage : uses
RunStatusMapper <-- GithubActionsClient : uses
RunConclusionMapper <-- GithubActionsClient : uses
RunConclusion <-- WorkflowRun : uses
RunStatus <-- WorkflowRun : uses

@enduml
