@startuml github_actions_client_class_diagram

package integration.interface.base.client.mapper {
    interface Mapper<SourceType, DestinationType> {
        map(SourceType value): DestinationType
        unmap(DestinationType value): SourceType
    }
}

package github_actions {
    package models {
        interface Page<T> {
            + totalCount: int
            + page: int
            + perPage: int
            + nextPageUrl: String
            + values: List<T>
        }

        class WorkflowRunsPage<WorkflowRun> {
            + totalCount: int
            + page: int
            + perPage: int
            + nextPageUrl: String
            + values: List<WorkflowRun>
        }

        class WorkflowRunArtifactsPage<WorkflowRunArtifact> {
            + totalCount: int
            + page: int
            + perPage: int
            + nextPageUrl: String
            + values: List<WorkflowRunArtifact>
        }

        class WorkflowRunJobsPage<WorkflowRunJob> {
            + totalCount: int
            + page: int
            + perPage: int
            + nextPageUrl: String
            + values: List<WorkflowRunJob>
        }

        class WorkflowRun {
            + id: int
            + number: int
            + url: String
            + status: GithubActionStatus
            + createdAt: DateTime

            + //factory// fromJson(Map<String, dynamic> json): WorkflowRun
            + toJson(): Map<String, dynamic>
            + {static} listFromJson(List<dynamic> list): List<WorkflowRun>
        }

        class WorkflowRunJob {
            + id: int
            + runId: int
            + name: String
            + url: String
            + status: GithubActionStatus
            + conclusion: GithubActionConclusion
            + startedAt: DateTime
            + completedAt: DateTime

            + //factory// fromJson(Map<String, dynamic> json): WorkflowRunJob
            + toJson(): Map<String, dynamic>
            + {static} listFromJson(List<dynamic> list): List<WorkflowRunJob>
        }

        class WorkflowRunArtifact {
            + id: int
            + name: String
            + downloadUrl: String

            + //factory// fromJson(Map<String, dynamic> json): WorkflowRunArtifact
            + toJson(): Map<String, dynamic>
            + {static} listFromJson(List<dynamic> list): List<WorkflowRunArtifact>
        }

        enum GithubActionStatus {
            queued
            inProgress
            completed
        }

        enum GithubActionConclusion {
            success
            failure
            neutral
            cancelled
            skipped
            timedOut
            actionRequired
        }

    }

    package mappers {
        class GithubActionConclusionMapper<String, GithubActionConclusion> implements Mapper {
            + map(String conclusion): GithubActionConclusion
            + unmap(GithubActionConclusion conclusion): String
        }

        class GithubActionStatusMapper<String, GithubActionStatus> implements Mapper {
            + map(String status): GithubActionStatus
            + unmap(GithubActionStatus status): String
        }

    }


    class GithubActionsClient {
        + repositoryOwner: String
        + repositoryName: String
        + githubApiUrl: String
        + authorization: AuthorizationBase

        + getHeaders() : Map<String, String>
        + fetchWorkflowRuns(String workflowIdentifier, GithubActionStatus status, int perPage, int page): Future<InteractionResult<WorkflowRunsPage>>
        + fetchWorkflowRunsNext(WorkflowRunsPage currentPage) : Future<InteractionResult<WorkflowRunsPage>>
        + fetchRunArtifacts(int runId, int perPage, int page): Future<InteractionResult<WorkflowRunArtifactsPage>>
        + fetchRunArtifactsNext(WorkflowRunArtifactsPage currentPage) : Future<InteractionResult<WorkflowRunArtifactsPage>>
        + downloadRunArtifactZip(String url): Future<InteractionResult<UInt8List>>
        + fetchRunJobs(int runId, GithubActionStatus status, int perPage, int page): Future<InteractionResult<WorkflowRunJobsPage>>
        + fetchRunJobsNext(WorkflowRunJobsPage currentPage): Future<InteractionResult<WorkflowRunJobsPage>>
        + close(): void
    }
}

WorkflowRunJobsPage .up.|> Page
WorkflowRunArtifactsPage .up.|> Page
WorkflowRunsPage .up.|> Page

GithubActionStatusMapper <-right- GithubActionsClient : uses
GithubActionConclusionMapper <-right- GithubActionsClient : uses

WorkflowRunsPage <-up- GithubActionsClient : uses
WorkflowRunArtifactsPage <-up- GithubActionsClient : uses
WorkflowRunJobsPage <-up- GithubActionsClient : uses

WorkflowRun "1..N" -up-o "1" WorkflowRunsPage : uses
WorkflowRunArtifact "1..N" -up-o "1" WorkflowRunArtifactsPage : uses
WorkflowRunJob "1..N" -up-o "1" WorkflowRunJobsPage : uses

GithubActionStatus <-- WorkflowRun : uses
GithubActionConclusion <-- WorkflowRunJob : uses
GithubActionStatus <-- WorkflowRunJob : uses

WorkflowRunJobsPage -right[hidden]-> WorkflowRunsPage
WorkflowRunJob -right[hidden]-> WorkflowRun
GithubActionConclusionMapper <-up[hidden]- GithubActionStatusMapper

@enduml
