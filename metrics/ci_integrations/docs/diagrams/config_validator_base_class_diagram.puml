@startuml config_validator_base_class_diagram
    package core.domain.entities {
        abstract class Enum<T> {
            + value: T
            + String toString()
        }
    }
    package integration {
        package interface {
            package base {
                package party {
                    interface IntegrationParty<T extends Config, K extends IntegrationClient> {
                        + clientFactory: IntegrationClientFactory<T, K>
                        + configParser: ConfigParser<T>
                        + configValidatorFactory: ConfigValidatorFactory<T>
                    }
                }

                package config {
                    package model {
                        interface Config {}
                        abstract class ConfigField {
                            + value : String
                        }
                    }

                    package validator {
                        interface ConfigValidator<T extends Config> {
                            + validationDelegate: ValidationDelegate
                            + validationResultBuilder: ValidationResultBuilder
                            + Future<ValidationResult> validate(T config)
                        }
                    }

                    package validation_delegate as base_validation_delegate {
                        interface ValidationDelegate {}                        
                    }

                    package validator_factory {
                        interface ConfigValidatorFactory<T extends Config> {
                            + ConfigValidator<T> create(T config)
                        }
                    }
                }
            }
        }

        package validation as integration_validation {
            package printer as integration_validation_printer {
                class ValidationResultPrinter {
                    - _ioSink : IOSink
                    + void print(ValidationResult result)
                }
            }

            package model as validation_model{
                package builder as validation_model_builder {
                    class ValidationResultBuilder {
                        - _results: Map<ConfigField, FieldValidationResult>
                        + ValidationResultBuilder forFields(List<ConfigField> fields)
                        + ValidationResult build()
                        + void setResult(ConfigField field, FieldValidationResult result)
                        + void setEmptyResults(FieldValidationResult result)
                    }
                }

                class ValidationResult {
                    + results: UnmodifiableMapView<ConfigField, FieldValidationResult>
                }

                class FieldValidationResult<T> {
                    + conclusion : FieldValidationConclusion
                    + additionalContext : String
                    + data : T
                    + isSuccess : bool
                    + isFailure : bool
                    + isUnknown : bool
                    
                    + FieldValidationResult success(String additionalContext, T data)
                    + FieldValidationResult failure(String additionalContext, T data)
                    + FieldValidationResult unknown(String additionalContext, T data)
                }

                enum FieldValidationConclusion {
                    valid
                    invalid
                    unknown
                }
            }
        }
    }

    IntegrationParty --> ConfigValidatorFactory : uses

    ConfigValidatorFactory --> ConfigValidator : uses

    ConfigValidator --> ValidationDelegate : uses
    ConfigValidator --> ValidationResult : provides
    ConfigValidator -up-> ValidationResultBuilder : uses
    ConfigValidator --> Config : uses

    ConfigField --|> Enum

    ValidationResultBuilder -up-> ValidationResult : builds
    ValidationResult -left-> FieldValidationResult : uses
    ValidationResultBuilder --> FieldValidationResult : uses
    ValidationResultPrinter -down-> ValidationResult : uses
    ValidationResultBuilder --> ConfigField : uses

    FieldValidationResult -up-> FieldValidationConclusion : uses

    Config -[hidden]down-> ConfigField
@enduml
