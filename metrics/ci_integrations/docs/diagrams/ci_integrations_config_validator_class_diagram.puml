@startuml ci_integrations_config_validator_class_diagram

    package integration {
        package interface {
            package base {
                package party {
                    interface IntegrationParty<T extends Config, K extends IntegrationClient, V extends ConfigValidator> {
                        + clientFactory: IntegrationClientFactory<T, K>
                        + configParser: ConfigParser<T>
                        + configValidatorFactory: ConfigValidatorFactory<V>
                    }
                }

                package config {
                    package model {
                        interface Config {}
                    }

                    package validator {
                        abstract class ConfigValidator<T extends Config> {
                            + validationDelegate: ValidationDelegate
                            + errorBuffer: StringBuffer
                            + Future<void> validate(T config)
                            + void addErrorMessage(String configField, String additionalContext)
                        }
                    }

                    package validation_delegate as base_validation_delegate {
                        interface ValidationDelegate {
                            + Future<InteractionResult> validateAuth(AuthorizationBase auth)
                        }
                    }

                    package validator_factory {
                        interface ConfigValidatorFactory<V extends ConfigValidator> {
                            + V create()
                        }
                    }
                }
            }

            package source.config.validation_delegate {
                interface SourceValidationDelegate {
                    + Future<InteractionResult> validateSourceProjectId(String sourceProjectId)
                }
            }

            package destination.config.validation_delegate {
                interface DestinationValidationDelegate {
                    + Future<InteractionResult> validateDestinationProjectId(String destinationProjectId)
                }
            }
        }

        package error {
            class ConfigValidationError {
                + message: String
                + String toString()
            }
        }
    }

    package destination.cool_integration {
        package config as cool_integration_config {
            package validator as cool_integration_validator {
                class CoolIntegrationDestinationConfigValidator {}
            }

            package validator_factory as cool_integration_validator_validator_factory {
                class CoolIntegrationConfigValidatorFactory {}
            }

            package validation_delegate {
                class CoolIntegrationDestinationValidationDelegate {
                    - _client: CoolIntegrationClient
                    + Future<InteractionResult> validateExtraField()
                }
            }
        }
    }

     package client.cool_integration as client_cool_integration {
        class CoolIntegrationClient {}
    }

    IntegrationParty --> ConfigValidatorFactory : uses

    ConfigValidatorFactory --> ConfigValidator : uses

    ConfigValidator --> ValidationDelegate : uses
    ConfigValidator --> Config : uses

    SourceValidationDelegate --up|> ValidationDelegate
    DestinationValidationDelegate --up|> ValidationDelegate

    CoolIntegrationDestinationValidationDelegate ..|> DestinationValidationDelegate

    CoolIntegrationDestinationConfigValidator --|> ConfigValidator
    CoolIntegrationDestinationConfigValidator -left-> CoolIntegrationDestinationValidationDelegate : uses
    CoolIntegrationDestinationValidationDelegate -down-> CoolIntegrationClient : uses
    CoolIntegrationConfigValidatorFactory ..|> ConfigValidatorFactory
    CoolIntegrationConfigValidatorFactory --> CoolIntegrationDestinationConfigValidator : creates
    CoolIntegrationConfigValidatorFactory --> CoolIntegrationClient : creates
    CoolIntegrationConfigValidatorFactory --> CoolIntegrationDestinationValidationDelegate : creates
    CoolIntegrationDestinationConfigValidator --> ConfigValidationError : throws

@enduml
