@startuml ci_integrations_config_validator_class_diagram

    package integration {
        package interface {
            package base {
                package party {
                    interface IntegrationParty<T extends Config, K extends IntegrationClient, V extends ConfigValidator> {
                        + clientFactory : IntegrationClientFactory<T, K>
                        + configParser : ConfigParser<T>
                        + configValidatorFactory : ConfigValidatorFactory<V>
                    }
                }

                package config {
                    package model {
                        interface Config {}

                        class ConfigValidationResult {
                            - _results : List<ConfigFieldValidationResult>

                            + void addResult(ConfigFieldValidationResult result)
                            + String toString()
                        }

                        class ConfigFieldValidationResult {
                            + conclusion : String
                            + field : String
                            + additionalContext : String
                            
                            + ConfigValidationResult.success(String field, String additionalContext)
                            + ConfigValidationResult.unknown(String field, String additionalContext)
                            + ConfigValidationResult.failure(String field, String additionalContext)

                            - ConfigValidationResult._(String conclusion, String field, String additionalContext)
                        }
                    }

                    package validator {
                        abstract class ConfigValidator<T extends Config> {
                            + validationDelegate : ValidationDelegate

                            + Future<ConfigValidationResult> validate(T config)
                        }
                    }

                    package validation_delegate as base_validation_delegate {
                        interface ValidationDelegate {
                            + Future<InteractionResult> validateAuth(AuthorizationBase auth)
                        }
                    }

                    package validator_factory {
                        interface ConfigValidatorFactory<V extends ConfigValidator> {
                            + V create()
                        }
                    }
                }
            }

            package source.config.validation_delegate {
                interface SourceValidationDelegate {
                    + Future<InteractionResult> validateSourceProjectId(String sourceProjectId)
                }
            }

            package destination.config.validation_delegate {
                interface DestinationValidationDelegate {
                    + Future<InteractionResult> validateDestinationProjectId(String destinationProjectId) 
                }
            }
        }
    }

    package destination.cool_integration {
        package config as cool_integration_config {
            package validator as cool_integration_validator {
                class CoolIntegrationDestinationConfigValidator {}
            }

            package validator_factory as cool_integration_validator_validator_factory {
                class CoolIntegrationConfigValidatorFactory {}
            }

            package validation_delegate {
                class CoolIntegrationDestinationValidationDelegate {
                    - _client: CoolIntegrationClient

                    + Future<InteractionResult> validateExtraField()
                }
            }
        }
    }

    package client.cool_integration as client_cool_integration {
        class CoolIntegrationClient {}
    }

    package cli.command {
        abstract class CiIntegrationCommand {}

        class ValidateCommand {
            + name : String
            + description : String
            + supportedParties : SupportedIntegrationParties 
            - _integrationConfigParser : RawIntegrationConfigParser

            + void run() 
        }
    }

    IntegrationParty --> ConfigValidatorFactory : uses

    ConfigValidatorFactory --> ConfigValidator : uses

    ConfigValidator --> ValidationDelegate : uses
    ConfigValidator --> ConfigValidationResult : uses
    ConfigValidator --> Config : uses

    ConfigValidationResult --> ConfigFieldValidationResult : uses

    SourceValidationDelegate -up-|> ValidationDelegate
    DestinationValidationDelegate -left-|> ValidationDelegate

    CoolIntegrationDestinationValidationDelegate ..|> DestinationValidationDelegate

    CoolIntegrationDestinationConfigValidator -down-|> ConfigValidator
    CoolIntegrationDestinationConfigValidator --> CoolIntegrationDestinationValidationDelegate : uses
    CoolIntegrationDestinationValidationDelegate --> CoolIntegrationClient : uses
    CoolIntegrationConfigValidatorFactory ..|> ConfigValidatorFactory
    CoolIntegrationConfigValidatorFactory --> CoolIntegrationDestinationConfigValidator : creates
    CoolIntegrationConfigValidatorFactory --> CoolIntegrationClient : creates
    CoolIntegrationConfigValidatorFactory --> CoolIntegrationDestinationValidationDelegate : creates

    ValidateCommand -left-> IntegrationParty : uses
    ValidateCommand -left-> ConfigValidatorFactory : uses
    ValidateCommand -left-> ConfigValidator : uses
    ValidateCommand --> Config : uses
    ValidateCommand --|> CiIntegrationCommand

@enduml
