@startuml ci_integrations_config_validator_class_diagram

    package integration {
        package interface {
            package base {
                package party {
                    abstract class IntegrationParty<T extends Config, K extends IntegrationClient, V extends ConfigValidator> {
                        + clientFactory: IntegrationClientFactory<T, K>
                        + configParser: ConfigParser<T>
                        + configValidatorFactory: ConfigValidatorFactory<V>
                    }
                }

                package client {
                    abstract class ConfigValidatorClient {
                        + Future<void> validateAuth(AuthorizationBase auth)
                    }
                }

                package config {
                    package model {
                        abstract class Config {}
                    }

                    package validator {
                        abstract class ConfigValidator<T extends Config> {
                            - validatorClient: ConfigValidatorClient
                            - errorBuffer: StringBuffer
                            + Future<void> validate(T config)
                        }
                    }

                    package validator_factory {
                        abstract class ConfigValidatorFactory<V extends ConfigValidator> {
                            + V create()
                        }
                    }
                }
            }

            package source {
                package client as source_client {
                    abstract class SourceConfigValidatorClient {
                        + Future<void> validateSourceProjectId(String sourceProjectId)
                    }
                }
            }

            package destination {
                package client as destination_client {
                    abstract class DestinationConfigValidatorClient {
                        + Future<void> validateDestinationProjectId(String destinationProjectId)
                    }
                }
            }
        }

        package exception {
            class ConfigValidationException {
                + message: String
                + String toString()
            }
        }
    }

    package destination.cool_integration {
        package config as cool_integration_config {
            package validator as cool_integration_validator {
                class CoolIntegrationDestinationConfigValidator {}
            }

            package validator_factory as cool_integration_validator_validator_factory {
                class CoolIntegrationConfigValidatorFactory {}
            }

            package adapter {
                class CoolIntegrationDestinationConfigValidatorClientAdapter {}
            }
        }
    }

     package client.cool_integration as client_cool_integration {
        class CoolIntegrationConfigValidatorClient {}
    }

    package cli.logger {
        class Logger {
            # void logError()
            # void logMessage()
            # void logInfo()
        }
    }

    IntegrationParty --> ConfigValidatorFactory : uses

    ConfigValidatorFactory --> ConfigValidator : uses

    ConfigValidator --> ConfigValidatorClient : uses
    ConfigValidator --> ConfigValidationException : throws
    ConfigValidator --> Logger : uses
    ConfigValidator --> Config : uses

    SourceConfigValidatorClient --up|> ConfigValidatorClient
    DestinationConfigValidatorClient --up|> ConfigValidatorClient

    CoolIntegrationDestinationConfigValidatorClientAdapter ..|> DestinationConfigValidatorClient

    CoolIntegrationDestinationConfigValidator ..|> ConfigValidator
    CoolIntegrationDestinationConfigValidator --> CoolIntegrationConfigValidatorClient : uses
    CoolIntegrationConfigValidatorFactory ..|> ConfigValidatorFactory
    CoolIntegrationConfigValidatorFactory --> CoolIntegrationDestinationConfigValidator : creates
    CoolIntegrationConfigValidatorFactory --> CoolIntegrationConfigValidatorClient : creates
    CoolIntegrationConfigValidatorFactory --> CoolIntegrationDestinationConfigValidatorClientAdapter : creates

@enduml
