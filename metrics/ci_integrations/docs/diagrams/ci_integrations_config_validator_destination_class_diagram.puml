@startuml ci_integrations_config_validator_class_diagram

    package integration.interface {

        package base.config {
            abstract class ConfigValidator<T extends Config> {
                + validationDelegate : ValidationDegate

                + Future<ValidationResult> validate(T config)
            }
        }

        package destination.config as interface_config {

            package validation_delegate as interface_delegate {
                interface DestinationValidationDelegate {
                    + Future<InteractionResult> validateAuth(AuthorizationBase auth)
                    + Future<InteractionResult> validateDestinationProjectId(String destinationProjectId)
                }
            }

            package validator_factory as interface_factory {
                interface ConfigValidatorFactory<T extends Config> {
                    + ConfigValidator<T> create(T config)
                }
            }

            package model as interface_model {
                package builder {
                    class ValidationResultBuilder {}
                }

                class ValidationResult {}

                abstract class ConfigField {}
            }

        }
    }

    package destination.cool_integration {

        package party as destination_party {
            class CoolIntegrationDestinationParty {
                + validatorFactory : CoolIntegrationValidatorFactory
            }
        }

        package config as cool_integration_config {
            package validator as cool_integration_validator {
                class CoolIntegrationDestinationValidator {
                    + validationDelegate: CoolIntegrationDestinationValidationDelegate

                    + Future<ValidationResult> validate(CoolIntegrationDestinationConfig config)
                }
            }

            package validator_factory as cool_integration_validator_factory {
                class CoolIntegrationValidatorFactory {}
            }

            package validation_delegate as cool_integration_validation_validation_delegate{
                class CoolIntegrationDestinationValidationDelegate {
                    - _client: CoolIntegrationClient

                    + Future<InteractionResult> validateExtraField()
                }
            }

            package model as destination_model {
                class CoolIntegrationDestinationConfigField {
                    # accessToken: CoolIntegrationDestinationConfigField
                    # destinationProjectId: CoolIntegrationDestinationConfigField
                    # someExtraField: CoolIntegrationDestinationConfigField
                    # fields: List<CoolIntegrationDestinationConfigField>
                }
            }
        }
    }

    package client.cool_integration as client_cool_integration {
        class CoolIntegrationClient {}
    }

    package cli.command {
        abstract class CiIntegrationCommand {}

        class ValidateCommand {
            + name : String
            + description : String
            + supportedParties : SupportedIntegrationParties
            - _integrationConfigParser : RawIntegrationConfigParser

            + void run()
        }
    }

    CoolIntegrationDestinationValidator --> CoolIntegrationDestinationValidationDelegate : uses
    CoolIntegrationDestinationValidationDelegate --> CoolIntegrationClient : uses

    CoolIntegrationValidatorFactory --> CoolIntegrationDestinationValidator : creates
    CoolIntegrationValidatorFactory --> CoolIntegrationClient : creates
    CoolIntegrationValidatorFactory --> CoolIntegrationDestinationValidationDelegate : creates

    ValidateCommand --|> CiIntegrationCommand

    ValidateCommand -left-> CoolIntegrationDestinationValidator : uses
    ValidateCommand -down-> CoolIntegrationValidatorFactory : uses
    ValidateCommand -down-> CoolIntegrationDestinationParty : uses

    CoolIntegrationDestinationParty --> CoolIntegrationValidatorFactory : provides

    CoolIntegrationDestinationValidationDelegate ..|> DestinationValidationDelegate

    CoolIntegrationDestinationConfigField --|> ConfigField

    CoolIntegrationDestinationValidator --|> ConfigValidator
    CoolIntegrationDestinationValidator -down-> CoolIntegrationDestinationConfigField : uses
    CoolIntegrationDestinationValidator --> ValidationResult : provides
    CoolIntegrationDestinationValidator --> ValidationResultBuilder : uses

    CoolIntegrationValidatorFactory ..|> ConfigValidatorFactory

    CoolIntegrationClient -[hidden]-> CoolIntegrationDestinationValidationDelegate

@enduml
