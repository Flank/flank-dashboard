@startuml commands_code_sharing

package cli {
    package command {
        abstract class CiIntegrationCommand {
            + dynamic getArgumentValue(String argumentName)
        }

        class ValidateCommand {
            + rawIntegrationConfigFactory : RawIntegrationConfigFactory
            + configuredPartiesFactory : ConfiguredPartiesFactory

            + Future<void> run()
        }
    }

    package parties as cli_parties {
        abstract class Parties<T extends IntegrationParty> {
            + parties : List<T>

            + T getParty(Map<String, dynamic> config)
        }

        class SupportedSourceParties {}

        class SupportedDestinationParties {}

        class SupportedIntegrationParties {}

        package configured_parties {
            package factory as configured_parties_factory {
                class ConfiguredPartiesFactory {
                    + supportedIntegrationParties : SupportedIntegrationParties

                    + ConfiguredParties create(RawIntegrationConfig config)
                }   
            }

            class ConfiguredParties {
                    + configuredSourceParty : ConfiguredSourceParty
                    + configuredDestinationParty : ConfiguredDestinationParty
                }

            abstract class ConfiguredParty<T extends Config, P extends Party> {
                + config : T
                + party : P
            }

            class ConfiguredSourceParty<SourceConfig, SourceParty> {}
            
            class ConfiguredDestinationParty<DestinationConfig, DestinationParty> {}
        }
    }
    
    package config {
        package parser {
            class RawIntegrationConfigParser {
                + RawIntegrationConfig parse(String configYaml)
            }
        }

        package factory {
            class RawIntegrationConfigFactory {
                + fileReader : FileReader
                + rawIntegrationConfigParser : RawIntegrationConfigParser

                + RawIntegrationConfig create(String path)
            }
        }
    }
    
    package util {
        class FileHelper {
            + File getFile(String path)
        }
        
        class FileReader {
            + fileHelper : FileHelper
            
            + String read(String path)
        }
    }
}

package integration.interface {
    package base.party{
        abstract class IntegrationParty<T extends Config, K extends IntegrationClient> {
            + clientFactory : IntegrationClientFactory<T, K>
            + configParser : ConfigParser<T>
            + configValidatorFactory : ConfigValidatorFactory<T>
        
            + bool acceptsConfig(Map<String, dynamic> config)
        }
    }

    package source.party {
        abstract class SourceParty {}
    }
    
    package destination.party {
        abstract class DestinationParty {}
    }
}

SourceParty -up-|> IntegrationParty
DestinationParty -up-|> IntegrationParty

Parties -right-> IntegrationParty : uses

SupportedSourceParties --|> Parties
SupportedDestinationParties --|> Parties

SupportedIntegrationParties --> SupportedSourceParties : uses
SupportedIntegrationParties --> SupportedDestinationParties : uses

ValidateCommand -up-|> CiIntegrationCommand
ValidateCommand --> SupportedIntegrationParties : uses
ValidateCommand -right-> RawIntegrationConfigFactory : uses
ValidateCommand --> ConfiguredPartiesFactory : uses

RawIntegrationConfigFactory -left-> FileReader : uses
RawIntegrationConfigFactory --> RawIntegrationConfigParser : creates

FileReader --> FileHelper : uses

ConfiguredPartiesFactory --> ConfiguredParties : creates
ConfiguredPartiesFactory -right-> SupportedIntegrationParties : uses

ConfiguredParties --> ConfiguredSourceParty : uses
ConfiguredParties --> ConfiguredDestinationParty : uses

ConfiguredSourceParty --|> ConfiguredParty
ConfiguredDestinationParty --|> ConfiguredParty

@enduml