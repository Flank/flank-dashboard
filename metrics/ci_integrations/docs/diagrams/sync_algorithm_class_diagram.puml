@startuml sync_algorithm_class_diagram
'https://plantuml.com/class-diagram

package integration.interface as Interface {
    package source {
        interface SourceClient {
            + fetchOneBuild(String projectId, int buildNumber): BuildData
            + fetchBuilds(String projectId, int fetchLimit): List<BuildData>
            + fetchBuildsAfter(String projectId, BuildData build): List<BuildData>
            + fetchCoverage(BuildData build): Percent
            + dispose(): void
        }
    }

    package destination {
        interface DestinationClient {
            + fetchLastBuild(String projectId): BuildData
            + fetchBuildsWithStatus(String projectId, BuildStatus status): List<BuildData>
            + addBuilds(String projectId, List<BuildData> builds): void
            + updateBuilds(String projectId, List<BuildData> builds): void
            + dispose(): void
        }
    }

    SourceClient -[hidden]down- DestinationClient
}

package integration.ci as CI {
    package config.model {
        class SyncConfig {
            + sourceProjectId: String
            + destinationProjectId: String
            + initialSyncLimit: int
            + inProgressTimeout: Duration
            + coverage: bool
        }
    }

    package sync_stage {
        class SyncStagesFactory {
            + source: SourceClient
            + destination: DestinationClient
            + create(): List<SyncStage>
        }

        package builds {
            abstract class BuildsSyncStage {
                + {abstract} source: SourceClient
                + {abstract} destination: DestinationClient
                + {abstract} call(SyncConfig): FutureOr<InteractionResult>
                + addCoverageData(List<BuildData> builds): List<BuildData>
            }
            class InProgressBuildsSyncStage extends BuildsSyncStage {
                + source: SourceClient
                + destination: DestinationClient
                + call(SyncConfig): Future<InteractionResult>
                - _syncInProgressBuild(SyncConfig config, BuildData build): BuildData
                - _fetchBuild(String sourceProjectId, int buildNumber): BuildData
                - _shouldTimeoutBuild(DateTime startedAt, Duration timeout): bool
            }

            class NewBuildsSyncStage extends BuildsSyncStage {
                + source: SourceClient
                + destination: DestinationClient
                + call(SyncConfig): Future<InteractionResult>
            }
        }

        interface SyncStage {
            + {abstract} source: SourceClient
            + {abstract} destination: DestinationClient
            + {abstract} call(SyncConfig): FutureOr<InteractionResult>
        }

        BuildsSyncStage .up.|> SyncStage
    }

    class CiIntegration {
        + stages: List<SyncStage>
        + CiIntegration(List<SyncStage>)
        + sync(SyncConfig config): Future<InteractionResult>
    }

    CiIntegration -right-> SyncConfig: uses
    SyncStagesFactory -right-> "1..N" SyncStage: creates
    CiIntegration "1" *-down-> "1..N" SyncStage: uses
}

Interface -[hidden]down-> CI

SyncStage -right-> SourceClient: uses
SyncStage -right-> DestinationClient: uses
SyncStage -up-> SyncConfig: uses

@enduml
