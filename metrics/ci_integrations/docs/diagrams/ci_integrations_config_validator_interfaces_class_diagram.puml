@startuml ci_integrations_config_validator_class_diagram

    package integration.interface {
        package base {
            package party {
                interface IntegrationParty<T extends Config, K extends IntegrationClient, V extends ConfigValidator> {
                    + clientFactory : IntegrationClientFactory<T, K>
                    + configParser : ConfigParser<T>
                    + configValidatorFactory : ConfigValidatorFactory<V>
                }
            }

            package config {
                package model {
                    interface Config {}

                    abstract class ConfigValidationResultBuilder<T extends ConfigValidationResult> {
                        + authValidationResult : ConfigFieldValidationResult
                        + interruptReason : String

                        + T build()
                        + void setAuthResult(ConfigFieldValidationResult authResult)
                        + void setInterruptReason(String reason)
                    }

                    interface ConfigValidationResult<T extends Config> {
                        + authValidationResult : ConfigFieldValidationResult

                        + String toString()
                    }

                    enum ConfigFieldValidationConclusion {
                        + valid
                        + invalid
                        + unknown
                    }

                    class ConfigFieldValidationResult {
                        + conclusion : ConfigFieldValidationConclusion
                        + field : String
                        + additionalContext : String

                        + isSuccess : bool
                        + isFailure : bool
                        + isUnknown : bool

                        + ConfigFieldValidationResult.success(String field, String additionalContext)
                        + ConfigFieldValidationResult.failure(String field, String additionalContext)
                        + ConfigFieldValidationResult.unknown(String field, String additionalContext)
                        + String toString()

                        - ConfigValidationResult._(ConfigFieldValidationConclusion conclusion, String field, String additionalContext)
                    }
                }

                package validator {
                    abstract class ConfigValidator<T extends Config, V extends ValidationDelegate> {
                        + validationDelegate : V

                        + Future<ConfigValidationResult> validate(T config)
                    }
                }

                package validation_delegate as base_validation_delegate {
                    interface ValidationDelegate {
                        + Future<InteractionResult> validateAuth(AuthorizationBase auth)
                    }
                }

                package validator_factory {
                    interface ConfigValidatorFactory<V extends ConfigValidator> {
                        + V create()
                    }
                }
            }
        }
        
        package source.config {
            package validation_delegate as source_validation_delegate {
                interface SourceValidationDelegate {
                    + Future<InteractionResult> validateSourceProjectId(String sourceProjectId)
                }
            }

            package model as source_model {
                interface SourceConfigValidationResult {
                    + sourceProjectIdValidationResult : ConfigFieldValidationResult
                }

                abstract class SourceConfigValidationResultBuilder {
                    + sourceProjectIdFieldValidationResult : ConfigFieldValidationResult

                    + void setSourceProjectIdResult(ConfigFieldValidationResult sourceProjectIdResult)
                }
            }
        }

        package destination.config {
            package validation_delegate as destination_validation_delegate {
                interface DestinationValidationDelegate {
                    + Future<InteractionResult> validateDestinationProjectId(String destinationProjectId)
                }
            }

            package model as destination_model {
                interface DestinationConfigValidationResult {
                    + destinationProjectIdValidationResult : ConfigFieldValidationResult
                }

                abstract class DestinationConfigValidationResultBuilder {
                    + destinationProjectIdFieldValidationResult : ConfigFieldValidationResult

                    + void setDestinationProjectIdResult(ConfigFieldValidationResult destinationProjectIdResult)
                }
            }
        }
    }

    IntegrationParty --> ConfigValidatorFactory : uses

    ConfigValidatorFactory --> ConfigValidator : uses

    ConfigValidator -left-> ValidationDelegate : uses
    ConfigValidator --> ConfigValidationResult : uses
    ConfigValidator --> ConfigValidationResultBuilder : uses
    ConfigValidator --> Config : uses

    ConfigValidationResultBuilder --> ConfigValidationResult : builds
    ConfigValidationResultBuilder --> ConfigFieldValidationResult : uses

    ConfigValidationResult --> ConfigFieldValidationResult : uses

    ConfigFieldValidationResult --> ConfigFieldValidationConclusion : uses

    SourceValidationDelegate -left-|> ValidationDelegate
    DestinationValidationDelegate -right-|> ValidationDelegate

    SourceConfigValidationResult -left-|> ConfigValidationResult
    DestinationConfigValidationResult -right-|> ConfigValidationResult

    SourceConfigValidationResultBuilder -left-|> ConfigValidationResultBuilder
    DestinationConfigValidationResultBuilder -right-|> ConfigValidationResultBuilder

    SourceConfigValidationResultBuilder -down-> SourceConfigValidationResult : builds
    DestinationConfigValidationResultBuilder -down-> DestinationConfigValidationResult : builds

    Config -[hidden]down-> ConfigValidationResultBuilder
    DestinationValidationDelegate -[hidden]down-> DestinationConfigValidationResultBuilder
    SourceValidationDelegate -[hidden]down-> SourceConfigValidationResultBuilder
    SourceConfigValidationResultBuilder -[hidden]down-> SourceConfigValidationResult
    DestinationConfigValidationResultBuilder -[hidden]down-> DestinationConfigValidationResult
@enduml
