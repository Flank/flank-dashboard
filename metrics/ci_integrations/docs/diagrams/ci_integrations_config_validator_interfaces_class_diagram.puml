@startuml ci_integrations_config_validator_class_diagram

    package integration.interface {
        package base {
            package party {
                interface IntegrationParty<T extends Config, K extends IntegrationClient> {
                    + clientFactory: IntegrationClientFactory<T, K>
                    + configParser: ConfigParser<T>
                    + configValidatorFactory: ConfigValidatorFactory<T>
                }
            }

            package config {
                package model {
                    interface Config {}

                    abstract class ConfigField {
                        + value: String

                        + String toString()
                    }

                    package builder {
                        class ValidationResultBuilder {
                            - _results: Map<ConfigField, FieldValidationResult>
                            
                            + ValidationResultBuilder forFields(List<ConfigField> fields)

                            + ValidationResult build()
                            + void setResult(ConfigField field, FieldValidationResult result)
                            + void setEmptyResults(FieldValidationResult result)
                        }
                    }

                    interface ValidationResult {
                        + results: UnmodifiableMapView<ConfigField, FieldValidationResult>

                        + String toString()
                    }
                }

                package validator {
                    interface ConfigValidator<T extends Config> {
                        + validationDelegate: ValidationDelegate

                        + Future<ValidationResult> validate(T config)
                    }
                }

                package validation_delegate as base_validation_delegate {
                    interface ValidationDelegate {
                        + Future<InteractionResult> validateAuth(AuthorizationBase auth)
                    }
                }

                package validator_factory {
                    interface ConfigValidatorFactory<T extends Config> {
                        + ConfigValidator<T> create(T config)
                    }
                }
            }
        }
        
        package source.config {
            package validation_delegate as source_validation_delegate {
                interface SourceValidationDelegate {
                    + Future<InteractionResult> validateSourceProjectId(String sourceProjectId)
                }
            }
        }

        package destination.config {
            package validation_delegate as destination_validation_delegate {
                interface DestinationValidationDelegate {
                    + Future<InteractionResult> validateDestinationProjectId(String destinationProjectId)
                }
            }
        }
    }



    IntegrationParty --> ConfigValidatorFactory : uses

    ConfigValidatorFactory --> ConfigValidator : uses

    ConfigValidator --> ValidationDelegate : uses
    ConfigValidator --> ValidationResult : provides
    ConfigValidator --> ValidationResultBuilder : uses
    ConfigValidator --> Config : uses
    ConfigValidator --> ConfigField : uses

    ValidationResultBuilder --> ValidationResult : builds
    ValidationResultBuilder --> ConfigField : uses

    ValidationResult --> ConfigField : uses

    SourceValidationDelegate --|> ValidationDelegate
    DestinationValidationDelegate -right-|> ValidationDelegate
@enduml

