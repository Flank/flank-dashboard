@startuml ci_integrations_config_validator_class_diagram
    package core.lib.src.domain.entities {
        abstract class Enum<T> {
            + value: T

            + String toString()
        }
    }

    package integration {
        package interface {
            package base {
                package party {
                    interface IntegrationParty<T extends Config, K extends IntegrationClient> {
                        + clientFactory: IntegrationClientFactory<T, K>
                        + configParser: ConfigParser<T>
                        + configValidatorFactory: ConfigValidatorFactory<T>
                    }
                }

                package config {
                    package model {
                        interface Config {}

                        abstract class ConfigField {}
                    }

                    package validator {
                        interface ConfigValidator<T extends Config> {
                            + validationDelegate: ValidationDelegate
                            + validationResultBuilder: ValidationResultBuilder

                            + Future<ValidationResult> validate(T config)
                        }
                    }

                    package validation_delegate as base_validation_delegate {
                        interface ValidationDelegate {
                            + Future<InteractionResult> validateAuth(AuthorizationBase auth)
                        }
                    }

                    package validator_factory {
                        interface ConfigValidatorFactory<T extends Config> {
                            + ConfigValidator<T> create(T config)
                        }
                    }
                }
            }
            
            package source.config {
                package validation_delegate as source_validation_delegate {
                    interface SourceValidationDelegate {
                        + Future<InteractionResult> validateSourceProjectId(String sourceProjectId)
                    }
                }
            }

            package destination.config {
                package validation_delegate as destination_validation_delegate {
                    interface DestinationValidationDelegate {
                        + Future<InteractionResult> validateDestinationProjectId(String destinationProjectId)
                    }
                }
            }
        }

        package config.validation.model as config_validation_model {
            package builder {
                class ValidationResultBuilder {
                    - _results: Map<ConfigField, FieldValidationResult>
                    
                    + ValidationResultBuilder forFields(List<ConfigField> fields)
                    + ValidationResult build()
                    + void setResult(ConfigField field, FieldValidationResult result)
                    + void setEmptyResults(FieldValidationResult result)
                }
            }

            class ValidationResult {
                + results: UnmodifiableMapView<ConfigField, FieldValidationResult>
            }
        }
    }

    IntegrationParty --> ConfigValidatorFactory : uses

    ConfigValidatorFactory --> ConfigValidator : uses

    ConfigValidator --> ValidationDelegate : uses
    ConfigValidator --> ValidationResult : provides
    ConfigValidator --> ValidationResultBuilder : uses
    ConfigValidator --> Config : uses
    ConfigValidator --> ConfigField : uses

    ConfigField --|> Enum

    ValidationResultBuilder -right-> ValidationResult : builds

    SourceValidationDelegate --|> ValidationDelegate
    DestinationValidationDelegate -right-|> ValidationDelegate

@enduml

