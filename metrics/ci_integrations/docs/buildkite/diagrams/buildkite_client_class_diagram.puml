@startuml buildkite_client_class_diagram

package integration.interface.base.client.mapper {
    interface Mapper<SourceType, DestinationType> {
        map(SourceType value): DestinationType
        unmap(DestinationType value): SourceType
    }
}

package buildkite {
    package models {
        class BuildkiteBuild {
            + id: int
            + number: int
            + state: BuildkiteState
            + name: String
            + url: String
            + startedAt: DateTime
            + finishedAt: DateTime

            + factory fromJson(Map<String, dynamic> json): BuildkiteBuild
            + toJson(): Map<String, dynamic>
            + listFromJson(List<dynamic> list): List<BuildkiteBuild>
        }

        class BuildkiteArtifact {
            + id: int
            + filename: String
            + downloadUrl: String

            + factory fromJson(Map<String, dynamic> json): BuildkiteArtifact
            + toJson(): Map<String, dynamic>
            + listFromJson(List<dynamic> list): List<BuildkiteArtifact>
        }

        interface Page<T> {
            + page: int
            + perPage: int
            + nextPageUrl: String
            + values: List<T>
        }

        class BuildkiteBuildsPage<BuildkiteBuild> implements Page {
            + page: int
            + perPage: int
            + nextPageUrl: String
            + values: List<BuildkiteBuild>
        }

        class BuildkiteArtifactsPage<BuildkiteArtifact> implements Page {
            + page: int
            + perPage: int
            + nextPageUrl: String
            + values: List<BuildkiteArtifact>
        }

        enum BuildkiteState {
          running,
          scheduled,
          passed,
          failed,
          blocked,
          canceled,
          canceling,
          skipped,
          not_run,
          finished
        }
    }

    package mappers {
        class BuildkiteStateMapper<String, BuildkiteState> implements Mapper {
            + map(String state): BuildkiteState
            + unmap(BuildkiteState state): String
        }

    }

    class BuildkiteClient {
        + organisationSlug: String
        + buildkiteApiUrl: String
        + authorization: AuthorizationBase

        + getHeaders(): Map<String, String>
        + fetchBuildkiteBuilds(String pipelineSlug, BuildkiteState state, int perPage, int page): Future<InteractionResult<BuildkiteBuildsPage>>
        + fetchBuildkiteBuildsNext(BuildkiteBuildsPage currentPage): Future<InteractionResult<BuildkiteBuildsPage>>
        + fetchBuildkiteArtifacts(int buildNumber, int perPage, int page): Future<InteractionResult<BuildkiteArtifactsPage>
        + fetchBuildkiteArtifactsNext(BuildkiteArtifactsPage currentPage): Future<InteractionResult<BuildkiteArtifactsPage>
        + downloadBuildkiteArtifactZip(String url): Future<InteractionResult<UInt8List>>
        + close(): void
    }
}

BuildkiteBuildsPage <-- BuildkiteClient : uses
BuildkiteArtifactsPage <-- BuildkiteClient : uses
BuildkiteBuild "1..N" -up-o "1" BuildkiteBuildsPage : uses
BuildkiteArtifact "1..N" -up-o "1" BuildkiteArtifactsPage : uses
BuildkiteStateMapper <-- BuildkiteClient : uses
BuildkiteState <-- BuildkiteBuild : uses

@enduml